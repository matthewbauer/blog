#+TITLE: How to bisect issues in NixOS and Nixpkgs
#+AUTHOR: Matthew Bauer <mjbauer95@gmail.com>
#+DATE: <2019-05-14 Tue>

When running updates on any system, it’s fairly common for issues to
arise. It’s inevitable that any changes to your system are going to
break things. But, with NixOS, we have two good features that help
deal with these breakages:

- Rollbacks. When you run =sudo nixos-rebuild switch --upgrade=, you
  can rollback to the previous NixOS version with =sudo nixos-rebuild
  switch --rollback=. This is nice if you quickly need to restore to
  the last good version. But, make sure to always file an issue when
  you have to do this, otherwise you could get stuck with out of date
  sotware! The NixOS/Nixpkgs issue tracker is at
  [[https://github.com/NixOS/nixpkgs/issues][https://github.com/NixOS/nixpkgs/issues]].

- Reproducible failures. Nix provides fixed versions of all software
  on the system. As a result, we can easily reproduce the failure
  given a Git hash and the command that is failing

In this post, I will focus on the second one. Specificially, I will
show how you can combine =git bisect= with the =nix= command to easily
track down which commit broke your system. I want to help users get
better at tracking down what commit caused there issues. First, we
need to go over how

* Git bisect commands

Git bisect is an extremely powerful tool. It’s also not as well known
as many other Git commands, and that should definitely change. =git
bisect= takes a range of Git commits and runs jumps between intervals
of those commits. The start of the range is the “good” commit while
the end of the range is the “bad” commit. Git then jumps to the middle
commit between good and bad and determines if that is “good” or “bad”.
If it’s “good”, Git jumps to the middle of this good commit and the
old bad commit. Otherwise, it’s “bad”, and Git jumps to the middle of
this bad commit and the old good commit. You can run bisect
interactively to go through the intervals yourself.

With Nix, it’s often useful to write a script to do this for you. This
is because building software can take a lot of time to complete. You
are not guaranteed to hit the binary cache when you are running
between commits.

There are five commands you need to know to use =git bisect=.

** =git bisect start=

This tells Git to enter bisect mode.

** =git bisect good=

This tells Git t

* Example

To better understrand how Nix and Git work together, I have an active
example. The issue is available at [[https://github.com/NixOS/nixpkgs/issues/61501]].


** Finding last good commit

Each NixOS generation has a Git commit associated with it. You can
find it at
=/nix/var/nix/profiles/per-user/root/channels/nixos/.git-revision=. To
determine previous generations is a little bit harder. This command
gives you all of your past channels (that haven’t been garbage
collected):

#+BEGIN_SRC sh
sudo nix-env --list-generations --profile
/nix/var/nix/profiles/per-user/root/channels
#+END_SRC

The output looks like this:

#+BEGIN_SRC text
  33   2019-05-06 12:57:00   
  34   2019-05-12 16:31:21   
  35   2019-05-12 16:44:43   
  36   2019-05-13 11:12:12   (current)
#+END_SRC

You can then find the commit of generation 34 with:

#+BEGIN_SRC sh
cat /nix/var/nix/profiles/per-user/root/channels-35-link/nixos/.git-revision
#+END_SRC

Combining these into a shell script:

#+BEGIN_SRC sh
cat /nix/var/nix/profiles/per-user/root/channels-$(sudo nix-env --list-generations --profile /nix/var/nix/profiles/per-user/root/channels | tail -n2 | head -n1 | awk '{print $1}')-link/nixos/.git-revision
#+END_SRC

** Final script

This is the script I used to find this:

#+BEGIN_SRC
git bisect start
git bisect bad 190727db4ea
git bisect good acbdaa5
git bisect run sh -c '
  touch a.s
  nix run -f. llvmPackages_8.clang-unwrapped -c clang -cc1as -triple x86_64-unknown-linux-gnu a.s
'
#+END_SRC

It takes a little while to run but ends up finding the correct commit
that broke this!
