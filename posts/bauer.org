#+TITLE: bauer: an Emacs+Nix IDE
#+AUTHOR: Matthew Bauer
#+EMAIL: mjbauer95@gmail.com
#+DESCRIPTION: My Emacs configuration
#+LANGUAGE: en
#+OPTIONS: c:nil d:t e:t f:t H:3 p:nil ':t *:t -:t ::t <:t \n:nil ^:{} |:t
#+OPTIONS: arch:nil author:t broken-links:nil
#+OPTIONS: creator:nil date:nil email:nil inline:nil num:nil pri:t
#+OPTIONS: prop:nil stat:t tags:nil tasks:nil tex:t timestamp:t title:t toc:nil
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{alltt}
#+LATEX_HEADER: \usepackage{upquote}
#+TAGS: noexport notangle
#+STARTUP: showall hideblocks
#+HTML_HEAD: <link rel=stylesheet href="https://matthewbauer.us/style.css" />
#+EXPORT_FILE_NAME: index
#+date: <2017-11-06 Mon>

I’m publishing my IDE as a blog post. It’s all written in Org Babel.

This file generates an Emacs configuration. It can be considered an ‘[[https://www.gnu.org/s/emacs/][Emacs]]+[[https://nixos.org][Nix]]’
IDE. That is, the Emacs configuration is /integrated/ with hardcoded Nix store
paths. This provides a kind of functional Emacs configuration.

* Usage
  :PROPERTIES:
  :header-args: :tangle no
  :END:

** Demo

   If you already have Nix installed, you can demo this out really easily. Just
   run the following,

   #+BEGIN_SRC sh
url="github.com/matthewbauer/bauer/archive/master.tar.gz" \
expr='import (builtins.fetchTarball "$url")' \
   nix-shell -p nix-bundle --run 'nix-run "$expr"'
   #+END_SRC

** Installing/upgrading

   Run this from your shell:

   #+BEGIN_SRC sh
curl https://matthewbauer.us/bootstrap.sh | sh
   #+END_SRC

   Alternatively, you can accomplish the same thing from Emacs by downloading
   [[https://raw.githubusercontent.com/matthewbauer/bauer/master/lisp/installer.el][installer.el]], loading it (=M‑x load‑file<RET>=) and running ‘install’
   (=M‑x install<RET>=). This process will take a little bit as everything is
   downloaded. After you restart Emacs, everything should be working.

** Developing

   To make changes to the IDE, it is recommended you setup your environment like
   so,

   #+BEGIN_SRC sh
git clone https://github.com/matthewbauer/bauer ~/bauer
cd ~/bauer
nix-build
./result/run
   #+END_SRC

   The last line will spawn an Emacs frame in the Git repo. Make any changes you
   want to [[./README.org][this document]] or any of the files in [[./lisp][the list folder]]. Make sure you
   commit your changes afterward by typing =C-c p v=, then =c-ac= (using Magit,
   of course). If you have forked this repo on GitHub, you can add it by typing
   =Mg= then your GitHub username within Magit. To push to it, just type =Pr=
   then find your username in the list and press enter. Pull requests are
   welcome through GitHub!

** w/o Nix usage
   :PROPERTIES:
   :CUSTOM_ID: nonix
   :header-args: :tangle no
   :END:

   You can use ~bauer~ without Nix. This just gives you the unintegrated Emacs
   configuration. To get started, run the following.

   #+BEGIN_SRC sh
mkdir -p ~/.emacs.d
git clone https://github.com/matthewbauer/bauer ~/.emacs.d/bauer
   #+END_SRC

   Then, add the following to [[~/.emacs.d/init.el][your Emacs init file]],

   #+BEGIN_SRC emacs-lisp :tangle init.el
(defvar bauer-dir (expand-file-name ".nixpkgs" (getenv "HOME")))
(defvar bauer-org (expand-file-name "README.org" bauer-dir))
(setq package-enable-at-startup nil)
(autoload 'org-babel-tangle-file "ob-tangle")
(if (locate-library "default")
    (unless (featurep 'default) (load "default" t))
  (let ((default-directory bauer-dir))
    (add-to-list 'load-path (expand-file-name "lisp" bauer-dir))
    (org-babel-tangle-file bauer-org "README.el" "emacs-lisp")
    (load-file (expand-file-name "README.el" bauer-dir))))
   #+END_SRC

* Emacs Init file
   :PROPERTIES:
   :header-args: :tangle yes
   :END:

   This is the main file of the IDE. It will be loaded by Emacs on startup.

** Verify Emacs version ≥ 25

   Emacs 24 is unsupported currently. This will check to make sure Emacs 25+ is
   available.

   #+BEGIN_SRC emacs-lisp
(unless (>= emacs-major-version 25)
  (error "Need Emacs 25+ to work properly"))
   #+END_SRC

*** EXPERIMENTAL Emacs 24 support
   :PROPERTIES:
   :header-args: :tangle no
   :END:

    If Nix is unavailable and only Emacs 24 is install for you, then you can try
    the experimental v24 branch. From the Git root of this repository, just run:

    #+BEGIN_SRC sh
git checkout v24
    #+END_SRC

    and make sure you have setup the Nix-less version in your [[~/.emacs.d/init.el][init.el]] file (see
    [[#nonix][w/o Nix usage directions]]).
** Increase GC

   #+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'after-init-hook
          (lambda ()
            (garbage-collect)
            (setq gc-cons-threshold
                  (car (get 'gc-cons-threshold 'standard-value)))))
   #+END_SRC

** Autoloads
   #+BEGIN_SRC emacs-lisp
(autoload 'tramp-tramp-file-p "tramp")
(eval-and-compile (autoload 'use-package-autoload-keymap "use-package"))
(autoload 'package-installed-p "package")
   #+END_SRC
** Custom config

   [[./lisp/set-defaults.el][set-defaults]] provides an easy way to override the default custom files. This
   means that when you customize a variable it will appear as ‘standard’ even
   though it’s not what the package originally defined as the default. This is
   useful for an Emacs distribution to provide /better defaults/ while still
   letting the user override them. Look through the lispdoc of the package for
   documentation on how this works. Eventually, this will be added to MELPA for
   use in other Emacs distributions.

   #+BEGIN_SRC emacs-lisp
(require 'set-defaults)
   #+END_SRC

*** Better defaults

   These are some *better* defaults for Emacs. They shouldn’t require any
   packages to be installed to work (those go in use-package).

    #+BEGIN_SRC emacs-lisp
(set-defaults
 '(TeX-auto-save t)
 '(TeX-engine 'xetex)
 '(ad-redefinition-action 'accept)
 '(apropos-do-all t)
 '(async-shell-command-buffer 'new-buffer)
 '(auth-source-save-behavior t)
 '(auto-revert-check-vc-info t)
 '(auto-revert-verbose nil)
 '(auto-save-visited-file-name t)
 '(backward-delete-char-untabify-method 'hungry)
 '(backup-directory-alist `(("." .
                             ,(expand-file-name "backup"
                                                user-emacs-directory))))
 '(bookmark-save-flag t)
 '(c-syntactic-indentation nil)
 '(comint-process-echoes t)
 '(comint-input-ignoredups t)
 '(comint-prompt-read-only t)
 '(comint-scroll-show-maximum-output nil)
 '(company-auto-complete (lambda () (and (company-tooltip-visible-p)
                                         (company-explicit-action-p))))
 '(company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
 '(company-continue-commands
   '(not save-buffer
         save-some-buffers
         save-buffers-kill-terminal
         save-buffers-kill-emacs
         comint-previous-matching-input-from-input
         comint-next-matching-input-from-input))
 '(company-require-match nil)
 '(company-selection-wrap-around t)
 '(compilation-always-kill t)
 '(compilation-ask-about-save nil)
 '(compilation-auto-jump-to-first-error nil)
 '(compilation-environment '("TERM=xterm-256color"))
 '(compilation-scroll-output nil)
 '(compilation-skip-threshold 2)
 '(completions-format 'vertical)
 '(completion-cycle-threshold 5)
 '(counsel-find-file-at-point t)
 '(counsel-mode-override-describe-bindings t)
 '(create-lockfiles nil)
 '(cursor-in-non-selected-windows nil)
 '(custom-safe-themes t)
 '(custom-buffer-done-kill t)
 '(custom-file (expand-file-name "settings.el" user-emacs-directory))
 '(custom-search-field nil)
 '(create-lockfiles nil)
 '(checkdoc-spellcheck-documentation-flag t)
 '(delete-old-versions t)
 '(delete-by-moving-to-trash t)
 '(dired-auto-revert-buffer t)
 '(dired-hide-details-hide-symlink-targets nil)
 '(dired-dwim-target t)
 '(dired-listing-switches "-alhv")
 '(dired-omit-verbose nil)
 '(dired-omit-files "^\\.")
 '(dired-recursive-copies 'always)
 '(dired-recursive-deletes 'always)
 '(dired-subtree-line-prefix " ")
 '(dtrt-indent-verbosity 0)
 '(disabled-command-function nil)
 '(display-buffer-reuse-frames t)
 '(echo-keystrokes 0)
 '(enable-recursive-minibuffers t)
 '(erc-autoaway-idle-seconds 600)
 '(erc-autojoin-timing 'ident)
 '(erc-fill-prefix "          ")
 '(erc-insert-timestamp-function 'erc-insert-timestamp-left)
 '(erc-interpret-mirc-color t)
 '(erc-kill-buffer-on-part t)
 '(erc-kill-queries-on-quit t)
 '(erc-kill-server-buffer-on-quit t)
 '(erc-prompt (lambda nil (concat "[" (buffer-name) "]")))
 '(erc-prompt-for-password nil)
 '(erc-query-display 'buffer)
 '(erc-server-coding-system '(utf-8 . utf-8))
 '(erc-timestamp-format "%H:%M ")
 '(erc-timestamp-only-if-changed-flag nil)
 '(erc-try-new-nick-p nil)
 '(eshell-banner-message "")
 '(eshell-cd-on-directory t)
 '(eshell-cmpl-autolist t)
 '(eshell-cmpl-cycle-completions nil)
 '(eshell-cmpl-cycle-cutoff-length 2)
 '(eshell-cmpl-ignore-case t)
 '(eshell-cp-interactive-query t)
 '(eshell-cp-overwrite-files nil)
 '(eshell-default-target-is-dot t)
 '(eshell-destroy-buffer-when-process-dies t)
 '(eshell-highlight-prompt t)
 '(eshell-hist-ignoredups t)
 '(eshell-history-size 10000)
 '(eshell-list-files-after-cd t)
 '(eshell-ln-interactive-query t)
 '(eshell-mv-interactive-query t)
 '(eshell-output-filter-functions '(eshell-handle-ansi-color
                                    eshell-handle-control-codes
                                    eshell-watch-for-password-prompt
                                    eshell-truncate-buffer))
 '(eshell-plain-echo-behavior nil)
 '(eshell-review-quick-commands t)
 '(eshell-rm-interactive-query t)
 '(eshell-prompt-function
   (lambda () (concat
               (when (tramp-tramp-file-p default-directory)
                 (concat
                  (tramp-file-name-user
                   (tramp-dissect-file-name default-directory))
                  "@"
                  (tramp-file-name-real-host (tramp-dissect-file-name
                                              default-directory))
                  " "))
               (let ((dir (eshell/pwd)))
                 (if (string= dir (getenv "HOME")) "~"
                   (let ((dirname (file-name-nondirectory dir)))
                     (if (string= dirname "") "/" dirname))))
               (if (= (user-uid) 0) " # " " $ "))))
 '(eshell-visual-commands
   '("vi" "screen" "top" "less" "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
     "nano" "nethack" "telnet" "emacs" "emacsclient" "htop" "w3m" "links" "lynx"
     "elinks" "irrsi" "mutt" "finch" "newsbeuter" "pianobar"))
 '(eval-expression-print-length 20)
 '(eval-expression-print-level nil)
 '(explicit-shell-args '("-c" "export EMACS= INSIDE_EMACS=; stty echo; shell"))
 '(expand-region-contract-fast-key "j")
 '(fill-column 80)
 '(flycheck-check-syntax-automatically '(save
                                         idle-change
                                         mode-enabled
                                         new-line))
 '(flycheck-display-errors-function
   'flycheck-display-error-messages-unless-error-list)
 '(flycheck-idle-change-delay 0.001)
 '(flycheck-standard-error-navigation nil)
 '(flycheck-global-modes '(not erc-mode
                               message-mode
                               git-commit-mode
                               view-mode
                               outline-mode
                               text-mode
                               org-mode))
 '(flyspell-abbrev-p nil)
 '(flyspell-auto-correct nil)
 '(flyspell-highlight-properties nil)
 '(flyspell-incorrect-hook nil)
 '(flyspell-issue-welcome-flag nil)
 '(frame-title-format '(:eval
                        (if (buffer-file-name)
                            (abbreviate-file-name (buffer-file-name))
                          "%b")))
 '(global-auto-revert-non-file-buffers t)
 '(highlight-nonselected-windows nil)
 '(hideshowvis-ignore-same-line nil)
 '(history-delete-duplicates t)
 '(history-length 20000)
 '(hippie-expand-verbose nil)
 '(iedit-toggle-key-default nil)
 '(imenu-auto-rescan t)
 '(indicate-empty-lines t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(inhibit-startup-echo-area-message t)
 '(initial-major-mode 'fundamental-mode)
 '(initial-scratch-message "")
 '(ispell-extra-args '("--sug-mode=ultra"))
 '(ispell-silently-savep t)
 '(ispell-quietly t)
 '(ivy-count-format "\"\"")
 '(ivy-display-style nil)
 '(ivy-minibuffer-faces nil)
 '(ivy-use-virtual-buffers t)
 '(ivy-fixed-height-minibuffer t)
 '(jit-lock-defer-time 0.01)
 '(js2-mode-show-parse-errors nil)
 '(js2-mode-show-strict-warnings nil)
 '(js2-strict-missing-semi-warning nil)
 '(kill-do-not-save-duplicates t)
 '(kill-whole-line t)
 '(load-prefer-newer t)
 '(mac-allow-anti-aliasing t)
 '(mac-command-key-is-meta t)
 '(mac-command-modifier 'meta)
 '(mac-option-key-is-meta nil)
 '(mac-option-modifier 'super)
 '(mac-right-option-modifier nil)
 '(mac-frame-tabbing t)
 '(mac-system-move-file-to-trash-use-finder t)
 '(magit-log-auto-more t)
 '(magit-clone-set-remote\.pushDefault t)
 '(magit-diff-options nil)
 '(magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
 '(magit-ediff-dwim-show-on-hunks t)
 '(magit-fetch-arguments nil)
 '(magit-highlight-trailing-whitespace nil)
 '(magit-highlight-whitespace nil)
 '(magit-no-confirm t)
 '(magit-process-connection-type nil)
 '(magit-process-find-password-functions '(magit-process-password-auth-source))
 '(magit-process-popup-time 15)
 '(magit-push-always-verify nil)
 '(magit-save-repository-buffers 'dontask)
 '(magit-stage-all-confirm nil)
 '(magit-unstage-all-confirm nil)
 '(mmm-global-mode 'buffers-with-submode-classes)
 '(mmm-submode-decoration-level 2)
 '(minibuffer-prompt-properties '(read-only t
                                            cursor-intangible t
                                            face minibuffer-prompt))
 '(mwim-beginning-of-line-function 'beginning-of-line)
 '(mwim-end-of-line-function 'end-of-line)
 '(neo-theme 'arrow)
 '(neo-fixed-size nil)
 '(next-error-recenter t)
 '(notmuch-show-logo nil)
 '(nrepl-log-messages t)
 '(nsm-save-host-names t)
 '(ns-function-modifier 'hyper)
 '(ns-pop-up-frames nil)
 '(org-blank-before-new-entry '((heading) (plain-list-item)))
 '(org-export-in-background nil)
 '(org-log-done 'time)
 '(org-return-follows-link t)
 '(org-special-ctrl-a/e t)
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation t)
 '(org-src-tab-acts-natively t)
 '(org-support-shift-select t)
 '(parens-require-spaces t)
 '(package-archives '(("melpa-stable" . "http://stable.melpa.org/packages/")
                      ("melpa" . "https://melpa.org/packages/")
                      ("org" . "http://orgmode.org/elpa/")
                      ("gnu" . "https://elpa.gnu.org/packages/")
                      ))
 '(proof-splash-enable nil)
 '(projectile-globally-ignored-files '(".DS_Store" "TAGS"))
 '(projectile-enable-caching t)
 '(projectile-mode-line
   '(:eval (if (and (projectile-project-p)
                    (not (file-remote-p default-directory)))
               (format " Projectile[%s]" (projectile-project-name)) "")))
 '(projectile-ignored-project-function 'file-remote-p)
 '(projectile-switch-project-action 'projectile-dired)
 '(projectile-do-log nil)
 '(projectile-verbose nil)
 '(reb-re-syntax 'string)
 '(require-final-newline t)
 '(resize-mini-windows t)
 '(ring-bell-function 'ignore)
 '(rtags-completions-enabled t)
 '(rtags-imenu-syntax-highlighting 10)
 '(ruby-insert-encoding-magic-comment nil)
 '(sh-guess-basic-offset t)
 '(same-window-buffer-names
   '("*eshell*" "*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*"))
 '(save-abbrevs 'silently)
 '(save-interprogram-paste-before-kill t)
 '(savehist-additional-variables '(search-ring
                                   regexp-search-ring
                                   kill-ring
                                   comint-input-ring))
 '(savehist-autosave-interval 60)
 '(auto-window-vscroll nil)
 '(hscroll-margin 5)
 '(hscroll-step 5)
 '(scroll-preserve-screen-position 'always)
 '(send-mail-function 'smtpmail-send-it)
 '(sentence-end-double-space nil)
 '(set-mark-command-repeat-pop t)
 '(shell-completion-execonly nil)
 '(shell-input-autoexpand nil)
 '(sp-autoskip-closing-pair 'always)
 '(sp-hybrid-kill-entire-symbol nil)
 '(truncate-lines nil)
 '(tab-always-indent 'complete)
 '(term-input-autoexpand t)
 '(term-input-ignoredups t)
 '(term-input-ring-file-name t)
 '(tramp-default-proxies-alist '(((regexp-quote (system-name)) nil nil)
                                 (nil "\\`root\\'" "/ssh:%h:")
                                 (".*" "\\`root\\'" "/ssh:%h:")))
 '(tramp-default-user nil)
 '(text-quoting-style 'quote)
 '(tls-checktrust t)
 '(undo-limit 800000)
 '(uniquify-after-kill-buffer-p t)
 '(uniquify-buffer-name-style 'forward)
 '(uniquify-ignore-buffers-re "^\\*")
 '(uniquify-separator "/")
 '(use-dialog-box nil)
 '(use-file-dialog nil)
 '(use-package-always-defer t)
 '(use-package-enable-imenu-support t)
 '(use-package-expand-minimally nil)
 '(version-control t)
 '(vc-allow-async-revert t)
 '(vc-command-messages nil)
 '(vc-git-diff-switches '("-w" "-U3"))
 '(vc-follow-symlinks nil)
 '(vc-ignore-dir-regexp
   (concat "\\(\\(\\`"
           "\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)"
            "\\'\\)\\|\\(\\`/[^/|:][^/|]*:\\)\\)\\|\\(\\`/[^/|:][^/|]*:\\)"))
 '(view-read-only t)
 '(view-inhibit-help-message t)
 '(visible-bell nil)
 '(visible-cursor nil)
 '(woman-imenu t)
 '(whitespace-line-column 80)
 '(whitespace-auto-cleanup t)
 '(whitespace-rescan-timer-time nil)
 '(whitespace-silent t)
 '(whitespace-style '(face
                      trailing
                      lines
                      space-before-tab
                      empty
                      lines-style))
 )
    #+END_SRC

*** Site paths

   Now, pull in generated paths from =site-paths.el=. Nix will generate this
   file automatically for us and different Emacs variables will be set to their
   Nix store derivations. Everything should work fine if you don’t have this
   available, though. If you are in Emacs and already have the IDE install you
   can inspect this file by typing =M-: (find-file (locate-library
   "site-paths"))=. It will look similar to a =settings.el= file where each line
   corresponds to a customizable variable. Unlike =settings.el=, each entry is
   path in the Nix store and we verify it exists before setting it.

   #+BEGIN_SRC emacs-lisp
(load "site-paths" :noerror)
   #+END_SRC

*** Set environment

    =set-envs= is provided by [[./lisp/set-defaults.el][set-defaults]]. We can use it like
    =custom-set-variables=, just it calls =setenv= instead of =setq=. All of
    these entries correspond to environment variables that we want to always be
    set in the Emacs process.

    #+BEGIN_SRC emacs-lisp
(set-envs
 '("EDITOR" "emacsclient -nw")
 '("LANG" "en_US.UTF-8")
 '("LC_ALL" "en_US.UTF-8")
 '("NODE_NO_READLINE" "1")
 '("PAGER" "cat")
 )
    #+END_SRC

*** Load custom file
    This file allows users to override above defaults.

    #+BEGIN_SRC emacs-lisp
(load custom-file 'noerror)
    #+END_SRC

** Setup use-package
   Now to get =use-package= we will require package.el and initialize it if
   site-paths is not setup (meaning we’re outside the Nix expression). Because
   site-paths should be available (unless you don’t have Nix), we can skip this
   step. All of this is marked ‘eval-and-compile’ to make sure the compiler
   picks it up on build phase.

   So, there are basically two modes for using this configuration. One when
   packages are installed externally (through Nix) and another where they are
   installed internally. This is captured in the variable ‘needs-package-init’
   which will be t when we want to use the builtin package.el and will be nli
   when we want to just assume everything is available.

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq needs-package-init (and (not (locate-library "site-paths"))
                                (not (and (boundp 'use-package-list--is-running)
                                          use-package-list--is-running)))))
   #+END_SRC

   First handle using package.el.

   #+BEGIN_SRC emacs-lisp
(when needs-package-init
  (require 'package)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)))
#+END_SRC

   Actually require use-package,

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (require 'use-package)
  (require 'bind-key))
   #+END_SRC

   Now let’s handle the case where all of the packages are already provided.
   Bascially, we’ll prevent use-package from running ‘ensure’ on anything.

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq use-package-always-ensure needs-package-init)
  (when (not needs-package-init)
    (setq use-package-ensure-function 'ignore
          package-enable-at-startup nil)))
   #+END_SRC

** Key bindings

   Using bind-key, setup some simple key bindings. None of these should
   overwrite Emacs’ default keybindings. Also, they should only require vanilla
   Emacs to work (non-vanilla Emacs key bindings should be put in their
   =use-package= declaration).

   #+BEGIN_SRC emacs-lisp
(bind-key "C-c C-u"         'rename-uniquely)
(bind-key "C-x ~"           (lambda () (interactive) (find-file "~")))
(bind-key "C-x /"           (lambda () (interactive) (find-file "/")))
(bind-key "C-c C-o"         'browse-url-at-point)
(bind-key "H-l"             'browse-url-at-point)
(bind-key "C-x 5 3"         'iconify-frame)
(bind-key "C-x 5 4"         'toggle-frame-fullscreen)
(bind-key "s-SPC"           'cycle-spacing)
(bind-key "C-c w w"         'whitespace-mode)

(bind-key "<C-return>"      'other-window)
(bind-key "C-z"             'delete-other-windows)
(bind-key "M-g l"           'goto-line)
(bind-key "<C-M-backspace>" 'backward-kill-sexp)
(bind-key "C-x t"           'toggle-truncate-lines)
(bind-key "C-x v H"         'vc-region-history)
(bind-key "C-c SPC"         'just-one-space)
(bind-key "C-c f"           'flush-lines)
(bind-key "C-c o"           'customize-option)
(bind-key "C-c O"           'customize-group)
(bind-key "C-c F"           'customize-face)
(bind-key "C-c q"           'fill-region)
(bind-key "C-c s"           'replace-string)
(bind-key "C-c u"           'rename-uniquely)
(bind-key "C-c z"           'clean-buffer-list)
(bind-key "C-c ="           'count-matches)
(bind-key "C-c ;"           'comment-or-uncomment-region)
(bind-key "C-c n"           'clean-up-buffer-or-region)
(bind-key "C-c d"           'duplicate-current-line-or-region)
(bind-key "M-+"             'text-scale-increase)
(bind-key "M-_"             'text-scale-decrease)

(bind-key "H-c"             'compile)
(bind-key "s-1"             'other-frame)
(bind-key "<s-return>"      'toggle-frame-fullscreen)

(bind-key "s-C-<left>"      'shrink-window-horizontally)
(bind-key "s-C-<right>"     'enlarge-window-horizontally)
(bind-key "s-C-<down>"      'shrink-window)
(bind-key "s-C-<up>"        'enlarge-window)

(require 'iso-transl)
(bind-key "' /"       "′" iso-transl-ctl-x-8-map)
(bind-key "\" /"      "″" iso-transl-ctl-x-8-map)
(bind-key "\" ("      "“" iso-transl-ctl-x-8-map)
(bind-key "\" )"      "”" iso-transl-ctl-x-8-map)
(bind-key "' ("       "‘" iso-transl-ctl-x-8-map)
(bind-key "' )"       "’" iso-transl-ctl-x-8-map)
(bind-key "4 < -"     "←" iso-transl-ctl-x-8-map)
(bind-key "4 - >"     "→" iso-transl-ctl-x-8-map)
(bind-key "4 b"       "←" iso-transl-ctl-x-8-map)
(bind-key "4 f"       "→" iso-transl-ctl-x-8-map)
(bind-key "4 p"       "↑" iso-transl-ctl-x-8-map)
(bind-key "4 n"       "↓" iso-transl-ctl-x-8-map)
(bind-key "<down>"    "⇓" iso-transl-ctl-x-8-map)
(bind-key "<S-down>"  "↓" iso-transl-ctl-x-8-map)
(bind-key "<left>"    "⇐" iso-transl-ctl-x-8-map)
(bind-key "<S-left>"  "←" iso-transl-ctl-x-8-map)
(bind-key "<right>"   "⇒" iso-transl-ctl-x-8-map)
(bind-key "<S-right>" "→" iso-transl-ctl-x-8-map)
(bind-key "<up>"      "⇑" iso-transl-ctl-x-8-map)
(bind-key "<S-up>"    "↑" iso-transl-ctl-x-8-map)
(bind-key ","         "…" iso-transl-ctl-x-8-map)
   #+END_SRC
** Setup installer                                                 :noexport:
   :PROPERTIES:
   :header-args: :tangle no
   :END:
   
   Provides installation and upgrading functionality. You can upgrade the IDE at
   any time by typing =M-x upgrade= from within Emacs. You may have to restart
   Emacs for the upgrade to take place. See [[./lisp/installer.el][installer.el]] for
   documentation.

   #+BEGIN_SRC emacs-lisp
(require 'installer nil t)
   #+END_SRC
** Helpers
   These utils are needed at init stage and should always appear before other
   use-package declarations.

   #+BEGIN_SRC emacs-lisp
(use-package add-hooks
  :commands (add-hooks add-hooks-pair))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
(use-package hook-helpers
  :commands (create-hook-helper
             define-hook-helper
             hkhlp-normalize-hook-spec)
  :functions (make-hook-helper
              add-hook-helper
              hkhlp-update-helper))
    #+END_SRC
** Packages

   Alphabetical listing of all Emacs packages needed by the IDE.

   Rules: No packages on the top level should have the :demand keyword. Each
   package should be setup as either commands, hooks, modes, or key bindings.
   Defer timers are allowed but should be used sparingly. Currently, these
   packages need defer timers:

 - autorevert (1)
 - company (2)
 - delsel (2)
 - dtrt-indent (3)
 - flycheck (3)
 - savehist (4)
 - save-place (5)
 - which-key (3)
 - apropostriate (2)

   To resort, go to one of the package group headings and type C-c ^ (the
   shortcut for org-sort).

*** Essentials

    Some of these are included in Emacs, others aren’t. All of them are
    necessary for using Emacs as a full featured IDE.

**** ace window
     #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-o" . other-window)
         ([remap next-multiframe-window] . ace-window)))
     #+END_SRC

**** aggressive-indent

     Automatically indent code as you type. Only enabled for Lisp currently.

     #+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :commands aggressive-indent-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . aggressive-indent-mode))))
     #+END_SRC

**** buffer-move

     #+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind
  (("<M-S-up>" . buf-move-up)
   ("<M-S-down>" . buf-move-down)
   ("<M-S-left>" . buf-move-left)
   ("<M-S-right>" . buf-move-right)))
     #+END_SRC

**** Company

     #+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :bind (:map company-active-map
              ("TAB" .
               company-select-next-if-tooltip-visible-or-complete-selection)
              ("<tab>" .
               company-select-next-if-tooltip-visible-or-complete-selection)
              ("S-TAB" . company-select-previous)
              ("<backtab>" . company-select-previous)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)
              )
  :commands (company-mode
             global-company-mode
             company-auto-begin
             company-complete-common-or-cycle)
  :config
  (setq company-backends
        '((company-css :with company-dabbrev)
          (company-nxml :with company-dabbrev)
          (company-elisp :with company-capf)
          (company-eshell-history :with company-capf company-files)
          (company-capf :with company-files company-keywords)
          (company-etags company-gtags company-clang company-cmake
                         :with company-dabbrev)
          (company-semantic :with company-dabbrev company-capf)
          (company-abbrev company-dabbrev company-keywords)
          ))
  (global-company-mode 1)
  (add-hook 'minibuffer-setup-hook 'company-mode)
  (add-hook 'minibuffer-setup-hook
            (lambda () (setq-local company-frontends
                                   '(company-preview-frontend))))
  (advice-add 'completion-at-point :override 'company-complete-common-or-cycle))
     #+END_SRC

***** company-anaconda                                             :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled

      #+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :commands company-anaconda
  :after company
  :config
  (add-to-list 'company-backends 'company-anaconda))
      #+END_SRC

***** company-auctex                                               :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :commands (company-auctex-labels
             company-auctex-bibs
             company-auctex-macros
             company-auctex-symbols
             company-auctex-environments)
  :after company
  :config
  (add-to-list 'company-backends 'company-auctex-labels)
  (add-to-list 'company-backends 'company-auctex-bibs)
  (add-to-list 'company-backends
               '(company-auctex-macros
                 company-auctex-symbols
                 company-auctex-environments)))
      #+END_SRC

***** company-eshell-history

      #+BEGIN_SRC emacs-lisp
(use-package company-eshell-history
  :ensure nil
  :commands company-eshell-history
  )
      #+END_SRC

***** company-irony                                                :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-irony
  :after company
  :commands company-irony
  :config (add-to-list 'company-backends 'company-irony))
      #+END_SRC

***** company-jedi                                                 :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :after company
  :commands company-statistics-mode
  :init (add-hook 'company-mode-hook 'company-statistics-mode))
      #+END_SRC

***** company-shell                                                :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-shell
  :after company
  :commands company-shell
  :config (add-to-list 'company-backends 'company-shell))
      #+END_SRC

***** company-statistics

      #+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :commands company-statistics-mode
  :init (add-hook 'company-mode-hook 'company-statistics-mode))
      #+END_SRC

***** company-tern                                                 :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-tern
  :after company
  :commands company-tern
  :config (add-to-list 'company-backends 'company-tern))
      #+END_SRC

***** company-web                                                  :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-web
  :after company
  :commands (company-web-html company-web-slim company-web-jade)
  :config
  (add-to-list 'company-backends 'company-web-html)
  (add-to-list 'company-backends 'company-web-slim)
  (add-to-list 'company-backends 'company-web-jade))
      #+END_SRC

***** readline-complete                                            :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package readline-complete
  :after company
  :config
  (add-to-list 'company-backends 'company-readline)
  (add-hook 'rlc-no-readline-hook (lambda () (company-mode -1))))
      #+END_SRC

**** compile

     #+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :bind (("C-c C-c" . compile)
         ("M-O" . show-compilation)
         :map compilation-mode-map
         ("o" . compile-goto-error))
  :preface
  (defun show-compilation ()
    (interactive)
    (let ((compile-buf
           (catch 'found
             (dolist (buf (buffer-list))
               (if (string-match "\\*compilation\\*" (buffer-name buf))
                   (throw 'found buf))))))
      (if compile-buf
          (switch-to-buffer-other-window compile-buf)
        (call-interactively 'compile))))

  :config
  (create-hook-helper compilation-ansi-color-process-output ()
    :hooks (compilation-filter-hook)
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker))))
     #+END_SRC

**** Counsel

     #+BEGIN_SRC emacs-lisp
(use-package counsel
  :commands (counsel-descbinds counsel-grep-or-swiper)
  :bind* (([remap execute-extended-command] . counsel-M-x)
          ([remap find-file] . counsel-find-file)
          ([remap describe-function] . counsel-describe-function)
          ([remap describe-variable] . counsel-describe-variable)
          ([remap info-lookup-symbol] . counsel-info-lookup-symbol)
          ("<f1> l" . counsel-find-library)
          ("C-c j" . counsel-git-grep)
          ("C-c k" . counsel-rg)
          ("C-x l" . counsel-locate)
          ("C-M-i" . counsel-imenu)
          ("M-y" . counsel-yank-pop)
          ("C-c i 8" . counsel-unicode-char)
          )
  :init
  (bind-key* [remap isearch-forward] 'counsel-grep-or-swiper
             (executable-find "grep"))
  )
     #+END_SRC

***** counsel-projectile                                           :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :commands counsel-projectile-on
  :init (add-hook 'projectile-mode-hook 'counsel-projectile-on))
      #+END_SRC

**** diff-hl

     #+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :commands (diff-hl-dir-mode diff-hl-mode diff-hl-magit-post-refresh
                              diff-hl-diff-goto-hunk)
  :bind (:map diff-hl-mode-map
              ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk))
  :init
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dir-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )
     #+END_SRC

**** dired

     #+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :init (require 'dired)
  :bind (("C-c J" . dired-double-jump)
         :map dired-mode-map
         ("C-c C-c" . compile)
         ("r" . browse-url-of-dired-file)))
     #+END_SRC

***** dired-collapse                                               :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :after dired
  :commands dired-collapse-mode
  :init (add-hook 'dired-mode-hook 'dired-collapse-mode))
      #+END_SRC

***** dired-column

      #+BEGIN_SRC emacs-lisp
(use-package dired-column
  :ensure nil
  :after dired
  :bind (:map dired-mode-map
              ("o" . dired-column-find-file)))
      #+END_SRC

***** dired-imenu

      #+BEGIN_SRC emacs-lisp
(use-package dired-imenu
  :after dired)
      #+END_SRC

***** dired-subtree

      #+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)))
      #+END_SRC

***** dired-x

      #+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil
  :after dired
  :commands (dired-omit-mode dired-hide-details-mode)
  :init
  (add-hook 'dired-mode-hook 'dired-omit-mode)
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  :bind (("s-\\" . dired-jump-other-window)
         :map dired-mode-map
         (")" . dired-omit-mode)))
      #+END_SRC

**** dtrt-indent

     #+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :commands dtrt-indent-mode
  :demand
  :config (dtrt-indent-mode 1))
     #+END_SRC

**** eldoc

     Provides some info for the thing at the point.

     #+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :commands eldoc-mode
  :init
  (add-hooks '(((emacs-lisp-mode
                 eval-expression-minibuffer-setup
                 lisp-mode-interactive-mode
                 typescript-mode) . eldoc-mode))))
     #+END_SRC

**** Emacs shell

     #+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :bind (("C-c M-t" . eshell)
         ("C-c x" . eshell))
  :commands (eshell eshell-command eshell-bol)
  :init
  (use-package em-rebind
    :preface
    (defun eshell-eol ()
      "Goes to the end of line."
      (interactive)
      (end-of-line))
    :ensure nil
    :demand
    :config
    (setq eshell-rebind-keys-alist
          '(([(control 97)] . eshell-bol)
            ([home] . eshell-bol)
            ([(control 100)] . eshell-delchar-or-maybe-eof)
            ([backspace] . eshell-delete-backward-char)
            ([delete] . eshell-delete-backward-char)
            ([(control 119)] . backward-kill-word)
            ([(control 117)] . eshell-kill-input)
            ([tab] . completion-at-point)
            ([(control 101)] . eshell-eol))))
  (setq eshell-modules-list
        '(eshell-alias
          eshell-banner
          eshell-basic
          eshell-cmpl
          eshell-dirs
          eshell-glob
          eshell-hist
          eshell-ls
          eshell-pred
          eshell-prompt
          eshell-rebind
          eshell-script
          eshell-smart
          eshell-term
          eshell-tramp
          eshell-unix
          eshell-xtra)))
     #+END_SRC

***** esh-help

      #+BEGIN_SRC emacs-lisp
(use-package esh-help
  :commands esh-help-eldoc-command
  :init (create-hook-helper esh-help-setup ()
          :hooks (eshell-mode-hook)
          (make-local-variable 'eldoc-documentation-function)
          (setq eldoc-documentation-function 'esh-help-eldoc-command)
          (eldoc-mode)))
      #+END_SRC

***** em-dired

      #+BEGIN_SRC emacs-lisp
(use-package em-dired
  :ensure nil
  :commands (em-dired-mode em-dired-new)
  :bind (:map dired-mode-map
              ("e" . em-dired))
  :init
  (add-hook 'eshell-mode-hook 'em-dired-mode)
  (advice-add 'eshell :before 'em-dired-new))
      #+END_SRC

**** Emacs speaks statistics

     #+BEGIN_SRC emacs-lisp
(use-package ess-site
  :ensure ess
  :no-require
  :commands R)
     #+END_SRC

**** esup

     #+BEGIN_SRC emacs-lisp
(use-package esup
  :commands esup
  :preface
  (defun init-profile ()
    (interactive)
    (esup (locate-library "default"))))
     #+END_SRC

**** flycheck

     #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :demand
  :commands global-flycheck-mode
  :config (global-flycheck-mode))
     #+END_SRC

***** flycheck-irony
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :commands flycheck-irony-setup
  :init (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
      #+END_SRC

**** flyspell

     #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure nil
  :preface (require 'ispell)
  :when (executable-find ispell-program-name)
  :commands (flyspell-mode flyspell-prog-mode)
  :config
  (setq flyspell-use-meta-tab nil)
  :init
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode))
     #+END_SRC

**** gnus

     #+BEGIN_SRC emacs-lisp
(use-package gnus
  :ensure nil
  :commands gnus
  :init
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))
     #+END_SRC

**** god-mode

     #+BEGIN_SRC emacs-lisp
(use-package god-mode
  :bind (("<escape>" . god-local-mode)))
     #+END_SRC

**** gud

     #+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :commands gud-gdb
  )
     #+END_SRC

**** help

     #+BEGIN_SRC emacs-lisp
(use-package help
  :ensure nil
  :bind (:map help-map
              ("C-v" . find-variable)
              ("C-k" . find-function-on-key)
              ("C-f" . find-function)
              ("C-l" . find-library)
              :map help-mode-map
              ("g" . revert-buffer-no-confirm))
  :preface
  (defun revert-buffer-no-confirm (&optional ignore-auto)
    "Revert current buffer without asking."
    (interactive (list (not current-prefix-arg)))
    (revert-buffer ignore-auto t nil)))
     #+END_SRC

**** helpful

     #+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)))
     #+END_SRC

**** info                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :bind ("C-h C-i" . info-lookup-symbol)
  )
     #+END_SRC

**** ivy

     #+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("<f6>" . ivy-resume)
         ([remap list-buffers] . ivy-switch-buffer)
         :map ivy-minibuffer-map
         ("<escape>" . abort-recursive-edit))
  :commands ivy-mode
  :init
  (require 'ivy nil t)
  (defvar projectile-completion-system)
  (defvar magit-completing-read-function)
  (defvar dumb-jump-selector)
  (defvar rtags-display-result-backend)
  (defvar projector-completion-system)
  (setq projectile-completion-system 'ivy
        magit-completing-read-function 'ivy-completing-read
        dumb-jump-selector 'ivy
        rtags-display-result-backend 'ivy
        projector-completion-system 'ivy)
  :config (ivy-mode 1))
     #+END_SRC

**** jka-compr                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     Add some binary plist decompression. This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :ensure nil
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
     #+END_SRC
**** kill-or-bury-alive

     #+BEGIN_SRC emacs-lisp
(use-package kill-or-bury-alive
  :bind (([remap kill-buffer] . kill-or-bury-alive)))
     #+END_SRC

**** magit

     #+BEGIN_SRC emacs-lisp
(use-package magit
  :preface
  (defun magit-dired-other-window ()
    (interactive)
    (dired-other-window (magit-toplevel)))

  (defun magit-remote-github (username &optional args)
    (interactive (list (magit-read-string-ns "User name")
                       (magit-remote-arguments)))
    (let* ((url (magit-get "remote.origin.url"))
           (match (string-match "^https?://github\.com/[^/]*/\\(.*\\)" url)))
      (unless match
        (error "Not a github remote"))
      (let ((repo (match-string 1 url)))
        (apply 'magit-remote-add username (format "https://github.com/%s/%s"
                                                  username repo) args))))

  :commands (magit-clone
             magit-toplevel
             magit-read-string-ns
             magit-remote-arguments
             magit-get
             magit-remote-add
             magit-define-popup-action)

  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-dispatch-popup)
         :map magit-mode-map
         ("C-o" . magit-dired-other-window))
  :init
  (defvar magit-last-seen-setup-instructions "1.4.0")
  :config
  (create-hook-helper magit-github-hook ()
    :hooks (magit-mode-hook)
    (magit-define-popup-action 'magit-remote-popup
      ?g "Add remote from github user name" #'magit-remote-github)))
     #+END_SRC

***** magithub                                                     :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package magithub
  :commands magithub-feature-autoinject
  :init (add-hook 'magit-mode-hook 'magithub-feature-autoinject))
      #+END_SRC

**** mb-depth

     #+BEGIN_SRC emacs-lisp
(use-package mb-depth
  :ensure nil
  :commands minibuffer-depth-indicate-mode
  :init (add-hook 'minibuffer-setup-hook 'minibuffer-depth-indicate-mode))
     #+END_SRC

**** mmm-mode

     #+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :commands mmm-mode
  :config
  (use-package mmm-auto
    :ensure nil
    :demand))
     #+END_SRC

**** multiple-cursors

     #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("<C-S-down>" . mc/mark-next-like-this)
   ("<C-S-up>" . mc/mark-previous-like-this)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click)
   ("C-c C-<"     . mc/mark-all-like-this)
   ("C-!"         . mc/mark-next-symbol-like-this)
   ("C-S-c C-S-c" . mc/edit-lines)))
     #+END_SRC

**** mwim

     #+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
         ([remap move-end-of-line] . mwim-end-of-code-or-line)))
     #+END_SRC

**** org-mode

     #+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :commands org-capture
  :bind* (("C-c c" . org-capture)
          ("C-c a" . org-agenda)
          ("C-c l" . org-store-link)
          ("C-c b" . org-iswitchb))
  :preface
  (defun org-completion-symbols ()
    (when (looking-back "=[a-zA-Z]+")
      (let (cands)
        (save-match-data
          (save-excursion
            (goto-char (point-min))
            (while (re-search-forward "=\\([a-zA-Z]+\\)=" nil t)
              (cl-pushnew
               (match-string-no-properties 0) cands :test 'equal))
            cands))
        (when cands
          (list (match-beginning 0) (match-end 0) cands)))))
(defun org-completion-refs ()
  (when (looking-back "\\\\\\(?:ref\\|label\\){\\([^\n{}]\\)*")
    (let (cands beg end)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\label{\\([^}]+\\)}" nil t)
          (push (match-string-no-properties 1) cands)))
      (save-excursion
        (up-list)
        (setq end (1- (point)))
        (backward-list)
        (setq beg (1+ (point))))
      (list beg end
            (delete (buffer-substring-no-properties beg end)
                    (nreverse cands))))))
  :init
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local completion-at-point-functions
                          '(org-completion-symbols
                            org-completion-refs
                            pcomplete-completions-at-point))))
  :config
  (use-package ob-dot
    :ensure nil
    :demand)
  (use-package ox-rss
    :ensure nil
    :demand)
  (use-package ox-latex
    :ensure nil
    :demand)
  (use-package ox-beamer
    :ensure nil
    :demand)
  (use-package ox-md
    :ensure nil
    :demand)
  (use-package ox-reveal
    :disabled
    :demand)
  (use-package ox-pandoc
    :disabled
    :demand)
  (use-package ob-http
    :disabled
    :demand)
  (use-package org-brain
    :disabled
    :demand)
  (use-package org-projectile
    :disabled
    :demand)
  (use-package org-present
    :disabled
    :demand)
  (use-package org-ref
    :disabled
    :demand)
  (use-package org-autolist
    :disabled
    :demand)
  (use-package ox-tufte
    :disabled
    :demand)
  (use-package org-static-blog
    :demand)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((sh . t)
                                 (emacs-lisp . t)
                                 (dot . t)
                                 (latex . t)
                                 ))
  )
     #+END_SRC

***** toc-org                                                      :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      #+BEGIN_SRC emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
      #+END_SRC

***** org-bullets                                                  :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :commands org-bullets-mode
  :init (add-hook 'org-mode-hook 'org-bullets-mode))
      #+END_SRC

**** Projectile

     Setup projectile and link it with some other packages. This also adds an
     easymenu to make the "Projectile" modeline clickable.

     #+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap* (("C-c p" . projectile-command-map)
                 ("s-p" . projectile-command-map))
  :bind (:map projectile-command-map
         ("s r" . projectile-rg))
  :preface
  (defun projectile-rg ()
    "Run ripgrep in projectile."
    (interactive)
    (counsel-rg "" (projectile-project-root)))
  :commands (projectile-mode)
  :defer 1
  :config
  (put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
  (put 'projectile-project-compilation-cmd 'safe-local-variable
       (lambda (a) (and (stringp a) (or (not (boundp 'compilation-read-command))
                                        compilation-read-command))))

  (projectile-mode)

  (use-package easymenu
    :ensure nil
    :config

    (easy-menu-define projectile-menu projectile-mode-map "Projectile"
      '("Projectile"
        :active nil
        ["Find file" projectile-find-file]
        ["Find file in known projects" projectile-find-file-in-known-projects]
        ["Find test file" projectile-find-test-file]
        ["Find directory" projectile-find-dir]
        ["Find file in directory" projectile-find-file-in-directory]
        ["Find other file" projectile-find-other-file]
        ["Switch to buffer" projectile-switch-to-buffer]
        ["Jump between implementation file and test file"
         projectile-toggle-between-implementation-and-test]
        ["Kill project buffers" projectile-kill-buffers]
        ["Recent files" projectile-recentf]
        ["Edit .dir-locals.el" projectile-edit-dir-locals]
        "--"
        ["Open project in dired" projectile-dired]
        ["Switch to project" projectile-switch-project]
        ["Switch to open project" projectile-switch-open-project]
        ["Discover projects in directory"
         projectile-discover-projects-in-directory]
        ["Search in project (grep)" projectile-grep]
        ["Search in project (ag)" projectile-ag]
        ["Replace in project" projectile-replace]
        ["Multi-occur in project" projectile-multi-occur]
        ["Browse dirty projects" projectile-browse-dirty-projects]
        "--"
        ["Run shell" projectile-run-shell]
        ["Run eshell" projectile-run-eshell]
        ["Run term" projectile-run-term]
        "--"
        ["Cache current file" projectile-cache-current-file]
        ["Invalidate cache" projectile-invalidate-cache]
        ["Regenerate [e|g]tags" projectile-regenerate-tags]
        "--"
        ["Compile project" projectile-compile-project]
        ["Test project" projectile-test-project]
        ["Run project" projectile-run-project]
        "--"
        ["Project info" projectile-project-info]
        ["About" projectile-version]
        ))))
     #+END_SRC

**** Proof General

     #+BEGIN_SRC emacs-lisp
(use-package proof-site
  :ensure proofgeneral
  :no-require
  :disabled needs-package-init
  :commands (proofgeneral proof-mode proof-shell-mode))
     #+END_SRC

**** Ripgrep

     #+BEGIN_SRC emacs-lisp
(use-package rg
  :commands rg)
     #+END_SRC

**** Shell

     #+BEGIN_SRC emacs-lisp
(use-package shell
  :ensure nil
  :commands (shell shell-mode)
  :bind ("C-c C-s" . shell)
  :init
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'shell-mode-hook 'dirtrack-mode)
  (create-hook-helper use-histfile ()
    :hooks (shell-mode-hook)
    (turn-on-comint-history (getenv "HISTFILE"))))
     #+END_SRC

**** smart-hungry-delete

     #+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :commands (smart-hungry-delete-default-c-mode-common-hook
             smart-hungry-delete-default-prog-mode-hook
             smart-hungry-delete-default-text-mode-hook)
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :init
  (add-hook 'prog-mode-hook 'smart-hungry-delete-default-prog-mode-hook)
  (add-hook 'c-mode-common-hook 'smart-hungry-delete-default-c-mode-common-hook)
  (add-hook 'python-mode-hook 'smart-hungry-delete-default-c-mode-common-hook)
  (add-hook 'text-mode-hook 'smart-hungry-delete-default-text-mode-hook))
     #+END_SRC

**** Smartparens

     #+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (smartparens-mode
             show-smartparens-mode
             smartparens-strict-mode
             sp-local-tag
             sp-local-pair)
  :bind (:map smartparens-mode-map
              ("C-M-k" . sp-kill-sexp)
              ("C-M-f" . sp-forward-sexp)
              ("C-M-b" . sp-backward-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ("C-M-w" . sp-copy-sexp)
              ("M-s" . sp-splice-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("M-S" . sp-split-sexp)
              ("M-J" . sp-join-sexp)
              ("C-M-t" . sp-transpose-sexp)
              ("C-M-<right>" . sp-forward-sexp)
              ("C-M-<left>" . sp-backward-sexp)
              ("M-F" . sp-forward-sexp)
              ("M-B" . sp-backward-sexp)
              ("C-M-a" . sp-backward-down-sexp)
              ("C-S-d" . sp-beginning-of-sexp)
              ("C-S-a" . sp-end-of-sexp)
              ("C-M-e" . sp-up-sexp)
              ("C-(" . sp-forward-barf-sexp)
              ("C-)" . sp-forward-slurp-sexp)
              ("M-(" . sp-forward-barf-sexp)
              ("M-)" . sp-forward-slurp-sexp)
              ("M-D" . sp-splice-sexp)
              ("C-<down>" . sp-down-sexp)
              ("C-<up>"   . sp-up-sexp)
              ("M-<down>" . sp-splice-sexp-killing-forward)
              ("M-<up>"   . sp-splice-sexp-killing-backward)
              ("C-<right>" . sp-forward-slurp-sexp)
              ("M-<right>" . sp-forward-barf-sexp)
              ("C-<left>"  . sp-backward-slurp-sexp)
              ("M-<left>"  . sp-backward-barf-sexp)
              ("C-k"   . sp-kill-hybrid-sexp)
              ("M-k"   . sp-backward-kill-sexp)
              ("M-<backspace>" . backward-kill-word)
              ("C-<backspace>" . sp-backward-kill-word)
              ([remap sp-backward-kill-word] . backward-kill-word)
              ("M-[" . sp-backward-unwrap-sexp)
              ("M-]" . sp-unwrap-sexp)
              ("C-x C-t" . sp-transpose-hybrid-sexp)
              :map smartparens-strict-mode-map
              ([remap c-electric-backspace] . sp-backward-delete-char)
              :map emacs-lisp-mode-map
              (";" . sp-comment))
  :init
  (add-hooks '(((emacs-lisp-mode
                 inferior-emacs-lisp-mode
                 ielm-mode
                 lisp-mode
                 inferior-lisp-mode
                 lisp-interaction-mode
                 slime-repl-mode
                 eval-expression-minibuffer-setup) . smartparens-strict-mode)))
  (add-hooks '(((emacs-lisp-mode
                 inferior-emacs-lisp-mode
                 ielm-mode
                 lisp-mode
                 inferior-lisp-mode
                 lisp-interaction-mode
                 slime-repl-mode) . show-smartparens-mode)))
  (add-hooks '(((web-mode
                 nxml-mode
                 html-mode) . smartparens-mode)))
  :config
  (use-package smartparens-html
    :ensure nil
    :demand)
  (use-package smartparens-config
    :ensure nil
    :demand)

  (sp-with-modes 'org-mode
    (sp-local-pair "*" "*"
                   :actions '(insert wrap)
                   :unless '(sp-point-after-word-p sp-point-at-bol-p)
                   :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
    (sp-local-pair "_" "_" :unless '(sp-point-after-word-p) :wrap "C-_")
    (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "«" "»"))

  (sp-with-modes
      '(java-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))

  (sp-with-modes '(markdown-mode gfm-mode rst-mode)
    (sp-local-pair "*" "*" :bind "C-*")
    (sp-local-tag "2" "**" "**")
    (sp-local-tag "s" "```scheme" "```")
    (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'clojure-mode "`" "`" :when '(sp-in-string-p))
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap)))
     #+END_SRC

**** sudo-edit

     #+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :bind (("C-c C-r" . sudo-edit)))
     #+END_SRC

**** swiper

     #+BEGIN_SRC emacs-lisp
(use-package swiper)
     #+END_SRC

**** term

     #+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :commands (term-mode term-char-mode term-set-escape-char)
  :init
  (add-hook 'term-mode-hook (lambda ()
                              (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
                              (setq-local transient-mark-mode nil)
                              (auto-fill-mode -1)))
  :preface
  (defun my-term ()
    (interactive)
    (set-buffer (make-term "my-term" "zsh"))
    (term-mode)
    (term-char-mode)
    (term-set-escape-char ?\C-x)
    (switch-to-buffer "*my-term*"))
  :bind ("C-c t" . my-term))
     #+END_SRC

**** tramp

     #+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :commands (tramp-tramp-file-p
             tramp-file-name-user
             tramp-file-name-real-host
             tramp-dissect-file-name))
     #+END_SRC

**** transpose-frame

     #+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :bind ("H-t" . transpose-frame))
     #+END_SRC

**** try

     #+BEGIN_SRC emacs-lisp
(use-package try
  :commands try)
     #+END_SRC

**** which-func

     #+BEGIN_SRC emacs-lisp
(use-package which-func
  :commands which-function-mode
  :ensure nil
  :demand
  :config (which-function-mode))
     #+END_SRC
**** which-key

     #+BEGIN_SRC emacs-lisp
(use-package which-key
  :commands which-key-mode
  :demand
  :config (which-key-mode))
     #+END_SRC

**** whitespace-cleanup-mode

     #+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :commands whitespace-cleanup-mode
  :init (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))
     #+END_SRC

**** whitespace

     #+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :commands whitespace-mode
  :init (add-hook 'prog-mode-hook 'whitespace-mode))
     #+END_SRC

**** yafolding

     #+BEGIN_SRC emacs-lisp
(use-package yafolding
  :commands yafolding-mode
  :init (add-hook 'prog-mode-hook 'yafolding-mode))
     #+END_SRC

*** Built-ins

    These are available automatically, so these =use-package= blocks just
    configure them.

**** align

     #+BEGIN_SRC emacs-lisp
(use-package align
  :bind (("C-c [" . align-regexp))
  :commands align
  :ensure nil)
     #+END_SRC

**** ansi-color

     Get color/ansi codes in compilation mode.

     #+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :ensure nil
  :commands ansi-color-apply-on-region
  :init (create-hook-helper colorize-compilation-buffer ()
          :hooks (compilation-filter-hook)
          (let ((inhibit-read-only t))
            (ansi-color-apply-on-region (point-min) (point-max)))))
     #+END_SRC

**** autorevert

     #+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :demand
  :commands auto-revert-mode
  :init
  (add-hook 'dired-mode-hook 'auto-revert-mode)
  :config
  (global-auto-revert-mode t))
     #+END_SRC

**** bug-reference

     #+BEGIN_SRC emacs-lisp
(use-package bug-reference
  :ensure nil
  :commands bug-reference-prog-mode
  :init (add-hook 'prog-mode-hook 'bug-reference-prog-mode))
     #+END_SRC

***** bug-reference-github

      #+BEGIN_SRC emacs-lisp
(use-package bug-reference-github
  :commands bug-reference-github-set-url-format
  :init (add-hook 'prog-mode-hook 'bug-reference-github-set-url-format))
      #+END_SRC

**** comint

     #+BEGIN_SRC emacs-lisp
(use-package comint
  :ensure nil
  :bind
  (:map comint-mode-map
        ("C-r"       . comint-history-isearch-backward-regexp)
        ("s-k"       . comint-clear-buffer)
        ("M-TAB"     . comint-previous-matching-input-from-input)
        ("<M-S-tab>" . comint-next-matching-input-from-input))
  :commands (comint-next-prompt
             comint-write-input-ring
             comint-after-pmark-p
             comint-read-input-ring
             comint-send-input)
  :preface
  (defun turn-on-comint-history (history-file)
    (setq comint-input-ring-file-name history-file)
    (comint-read-input-ring 'silent))
  :config
  (add-hook 'kill-buffer-hook 'comint-write-input-ring)
  (create-hook-helper save-history ()
    :hooks (kill-emacs-hook)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer (comint-write-input-ring)))))
     #+END_SRC

**** delsel

     #+BEGIN_SRC emacs-lisp
(use-package delsel
  :ensure nil
  :demand
  :config (delete-selection-mode t))
     #+END_SRC

**** edebug

     #+BEGIN_SRC emacs-lisp
(use-package edebug
  :ensure nil)
     #+END_SRC

**** electric

     Setup these modes:

     - electric-quote
     - electric-indent
     - electric-layout

     #+BEGIN_SRC emacs-lisp
(use-package electric
  :ensure nil
  :commands (electric-quote-mode electric-indent-mode electric-layout-mode)
  :init
  (add-hook 'prog-mode-hook 'electric-quote-mode)
  (add-hook 'prog-mode-hook 'electric-indent-mode)
  (add-hook 'prog-mode-hook 'electric-layout-mode))
     #+END_SRC

***** elec-pair

      Setup electric-pair-mode for prog-modes. Also disable it when smartparens is
      setup.

      #+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :commands electric-pair-mode
  :init
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (add-hook 'smartparens-mode-hook (lambda () (electric-pair-mode -1))))
      #+END_SRC

**** etags

     #+BEGIN_SRC emacs-lisp
(use-package etags
  :ensure nil
  :commands (tags-completion-table))
     #+END_SRC

**** executable

     #+BEGIN_SRC emacs-lisp
(use-package executable
  :ensure nil
  :commands executable-make-buffer-file-executable-if-script-p
  :init
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p))
     #+END_SRC

**** ffap

     #+BEGIN_SRC emacs-lisp
(use-package ffap
  :ensure nil
  )
     #+END_SRC

***** TODO handle line numbers like filename:line:col

**** goto-addr

     #+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :ensure nil
  :commands (goto-address-prog-mode goto-address-mode)
  :init
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'git-commit-mode-hook 'goto-address-mode))
     #+END_SRC

**** grep

     #+BEGIN_SRC emacs-lisp
(use-package grep
  :ensure nil
  :bind (("M-s d" . find-grep-dired)
         ("M-s F" . find-grep)
         ("M-s G" . grep)))
     #+END_SRC

**** hideshow                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :commands hs-minor-mode
  :init (add-hooks '(((c-mode-common
                       lisp-mode
                       emacs-lisp-mode
                       java-mode) . hs-minor-mode))))
     #+END_SRC

***** hideshowvis

      #+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :commands (hideshowvis-minor-mode hideshowvis-symbols)
  :init (add-hook 'prog-mode-hook 'hideshowvis-minor-mode))
      #+END_SRC

**** hippie-exp

     #+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :ensure nil
  :bind* (("M-/". hippie-expand)))
     #+END_SRC

**** ibuffer

     #+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ([remap switch-to-buffer] . ibuffer))
     #+END_SRC

**** imenu
***** imenu-anywhere

      #+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
      #+END_SRC

***** imenu-list

      #+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :commands imenu-list)
      #+END_SRC

**** newcomment

     #+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind ("s-/" . comment-or-uncomment-region))
     #+END_SRC

**** notmuch

     #+BEGIN_SRC emacs-lisp
(use-package notmuch
  :commands notmuch)
     #+END_SRC

**** pp

     #+BEGIN_SRC emacs-lisp
(use-package pp
  :ensure nil
  :commands pp-eval-last-sexp
  :bind (([remap eval-expression] . pp-eval-expression))
  :init
  (global-unset-key (kbd "C-x C-e"))
  (create-hook-helper always-eval-sexp ()
    :hooks (lisp-mode-hook emacs-lisp-mode-hook)
    (define-key (current-local-map) (kbd "C-x C-e") 'pp-eval-last-sexp)))
     #+END_SRC

**** prog-mode

     #+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :commands (prettify-symbols-mode global-prettify-symbols-mode)
  :init
  (add-hook 'prog-mode-hook 'prettify-symbols-mode)
  (create-hook-helper prettify-symbols-prog ()
    ""
    :hooks (prog-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-lisp ()
    ""
    :hooks (lisp-mode-hook)
    (push '("/=" . ?≠) prettify-symbols-alist)
    (push '("sqrt" . ?√) prettify-symbols-alist)
    (push '("not" . ?¬) prettify-symbols-alist)
    (push '("and" . ?∧) prettify-symbols-alist)
    (push '("or" . ?∨) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-c ()
    ""
    :hooks (c-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-c++ ()
    ""
    :hooks (c++-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-js ()
    ""
    :hooks (js2-mode-hook js-mode-hook)
    (push '("function" . ?λ) prettify-symbols-alist)
    (push '("=>" . ?⇒) prettify-symbols-alist)))
     #+END_SRC

**** savehist

     #+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :demand
  :commands savehist-mode
  :config (savehist-mode 1))
     #+END_SRC

**** saveplace                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure nil
  :commands save-place-mode
  :demand
  :config (save-place-mode t))
     #+END_SRC

**** server                                                        :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :demand
  :commands server-start
  :config
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'server-switch-hook 'raise-frame))
     #+END_SRC

**** simple

     #+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :demand
  :bind
  (("C-`" . list-processes)
   :map minibuffer-local-map
   ("<escape>"  . abort-recursive-edit)
   ("M-TAB"     . previous-complete-history-element)
   ("<M-S-tab>" . next-complete-history-element))
  :commands visual-line-mode
  :init
  (add-hook 'text-mode-hook 'visual-line-mode)
  :config
  (column-number-mode))
     #+END_SRC

**** subword

     #+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :commands subword-mode
  :init (add-hook 'java-mode-hook 'subword-mode))
     #+END_SRC

**** text-mode                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is disabled for now

     #+BEGIN_SRC emacs-lisp
(use-package text-mode
  :no-require
  :ensure nil
  :init
  (add-hook 'text-mode-hook 'turn-on-auto-fill))
     #+END_SRC

**** time

     #+BEGIN_SRC emacs-lisp
(use-package time
  :demand
  :config
  (display-time-mode)
  )
     #+END_SRC

**** tooltip

     #+BEGIN_SRC emacs-lisp
(use-package tooltip
  :ensure nil
  :demand
  :config
  (tooltip-mode -1))
     #+END_SRC

**** view

     #+BEGIN_SRC emacs-lisp
(use-package view
  :ensure nil
  :bind (:map view-mode-map
              ("n" . next-line)
              ("p" . previous-line)
              ("j" . next-line)
              ("k" . previous-line)
              ("l" . forward-char)
              ("f" . forward-char)
              ("b" . backward-char)))
     #+END_SRC

**** windmove

     #+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind (("<s-down>" . windmove-down)
         ("<s-up>" . windmove-up)
         ))
     #+END_SRC

*** Programming languages
    Each =use-package= declaration corresponds to =major modes= in Emacs lingo.
    Each language will at least one of these major modes as well as associated
    packages (for completion, syntax checking, etc.)

**** C/C++

     #+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure nil
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'" . c-mode)
         ("\\.c\\'" . c-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.c++\\'" . c++-mode)
         ("\\.mm\\'" . c++-mode))
  :config
  (use-package c-eldoc
    :commands c-turn-on-eldoc-mode
    :init (add-hook 'c-mode-common-hook 'c-turn-on-eldoc-mode)))
     #+END_SRC

***** irony

      #+BEGIN_SRC emacs-lisp
(use-package irony
  :commands irony-mode
  :init (add-hooks '(((c++-mode c-mode objc-mode) . irony-mode))))
      #+END_SRC

***** irony-eldoc

      #+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :commands irony-eldoc
  :init (add-hook 'irony-mode-hook 'irony-eldoc))
      #+END_SRC

***** rtags                                                        :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      Rtags is started with C and C++ projects. This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package rtags
  :commands (rtags-start-process-unless-running
             rtags-enable-standard-keybindings)
  :init
  (create-hook-helper rtags-start ()
    :hooks (c-mode-common-hook c++-mode-common-hook)
    (when (not (tramp-tramp-file-p (buffer-file-name (current-buffer))))
      (rtags-start-process-unless-running)))

  :config
  (rtags-enable-standard-keybindings c-mode-base-map "\C-cr"))
      #+END_SRC

**** CoffeeScript

     #+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode (("\\.coffee\\'" . coffee-mode)))
     #+END_SRC

**** CSS

     #+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :mode "\\.css\\'"
  :commands css-mode
  :config
  (use-package css-eldoc
    :demand)
  )
     #+END_SRC

**** CSV

     #+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'")
     #+END_SRC

**** ELF

     #+BEGIN_SRC emacs-lisp
(use-package elf-mode
  :commands elf-mode
  :init (add-to-list 'magic-mode-alist (cons "ELF" 'elf-mode)))
     #+END_SRC

***** TODO use use-package’s :magic keyword

**** Go

     #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'")
     #+END_SRC

***** go-eldoc

      #+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :commands go-eldoc-setup
  :init (add-hook 'go-mode-hook 'go-eldoc-setup))
      #+END_SRC

**** HAML

     #+BEGIN_SRC emacs-lisp
(use-package haml-mode
  :mode "\\.haml\\'")
     #+END_SRC

**** Haskell
***** intero

      #+BEGIN_SRC emacs-lisp
(use-package intero
  :commands intero-mode
  :preface
  (defun intero-mode-unless-global-project ()
    "Run intero-mode iff we're in a project with a stack.yaml"
    (unless (string-match-p
             (regexp-quote ".stack/global-project")
             (shell-command-to-string
              "stack path --project-root --verbosity silent"))
      (intero-mode)))
  :init
  (add-hook 'haskell-mode-hook 'intero-mode-unless-global-project)
  )
      #+END_SRC

***** ghc

      #+BEGIN_SRC emacs-lisp
(use-package ghc)
      #+END_SRC

***** haskell-mode

      #+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :mode (("\\.hs\\'" . haskell-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :commands haskell-indentation-moe
  :init
  (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
  :config
  (use-package haskell-doc
    :ensure nil
    :demand))
      #+END_SRC

**** Java
***** jdee

      #+BEGIN_SRC emacs-lisp
(use-package jdee
  :mode ("\\.java\\'" . jdee-mode)
  :commands jdee-mode
  :bind (:map jdee-mode-map
              ("<s-mouse-1>" . jdee-open-class-at-event)))
      #+END_SRC

**** JavaScript
***** indium

      #+BEGIN_SRC emacs-lisp
(use-package indium
  :mode ("\\.js\\'" . indium-mode)
  :commands (indium-mode indium-interaction-mode indium-scratch))
      #+END_SRC

***** js2-mode
      #+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode))
  :commands js2-imenu-extras-mode
  :init
  (add-hook 'js2-mode-hook 'js2-imenu-extras-mode))
      #+END_SRC

***** js3-mode

      #+BEGIN_SRC emacs-lisp
(use-package js3-mode
  :commands js3-mode)
      #+END_SRC

***** tern

      #+BEGIN_SRC emacs-lisp
(use-package tern
  :commands tern-mode
  :init (add-hook 'js2-mode-hook 'tern-mode))
      #+END_SRC

**** JSON

     #+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.bowerrc$"     . json-mode)
         ("\\.jshintrc$"    . json-mode)
         ("\\.json_schema$" . json-mode)
         ("\\.json\\'" . json-mode))
  :config
  (make-local-variable 'js-indent-level))
     #+END_SRC

**** LaTeX
***** auctex

      Auctex provides some helpful tools for working with LaTeX.

      #+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :no-require
  :commands (TeX-latex-mode
             TeX-mode
             tex-mode
             LaTeX-mode
             latex-mode)
  :mode ("\\.tex\\'" . TeX-latex-mode))
      #+END_SRC

**** Lisp

     #+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :interpreter (("emacs" . emacs-lisp-mode)))
     #+END_SRC

***** cider

      #+BEGIN_SRC emacs-lisp
(use-package cider)
      #+END_SRC

***** slime

      #+BEGIN_SRC emacs-lisp
(use-package slime)
      #+END_SRC

***** ielm

      #+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :bind ("C-c :" . ielm))
      #+END_SRC

**** LLVM IR
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package llvm-mode
  :mode "\\.ll\\'")
     #+END_SRC

**** Lua
***** lua-mode

      #+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'")
      #+END_SRC

**** Mach-O

     #+BEGIN_SRC emacs-lisp
(use-package macho-mode
  :commands macho-mode
  :ensure nil
  :init
  (add-to-list 'magic-mode-alist '("\xFE\xED\xFA\xCE" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xFE\xED\xFA\xCF" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xCE\xFA\xED\xFE" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xCF\xFA\xED\xFE" . macho-mode)))
     #+END_SRC

***** TODO use use-package’s :magic

**** Makefile
***** make-mode

      #+BEGIN_SRC emacs-lisp
(use-package make-mode
  :ensure nil
  :init
  (add-hook 'makefile-mode-hook 'indent-tabs-mode))
      #+END_SRC

**** Markdown
***** vmd-mode                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package vmd-mode
  :init (require 'markdown-mode nil t)
  :bind (:map markdown-mode-map ("C-x p" . vmd-mode)))
      #+END_SRC

***** markdown-mode

      #+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode
  (("\\.md\\'" . gfm-mode)
   ("\\.markdown\\'" . gfm-mode))
  :config
  (bind-key "'" "’" markdown-mode-map
            (not (or (markdown-code-at-point-p)
                     (memq 'markdown-pre-face
                           (face-at-point nil 'mult))))))
      #+END_SRC

**** Nix

     #+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
     #+END_SRC

***** nix-buffer

      #+BEGIN_SRC emacs-lisp
(use-package nix-buffer
  :commands nix-buffer)
      #+END_SRC

**** NROFF

     #+BEGIN_SRC emacs-lisp
(use-package nroff-mode
  :ensure nil
  :commands nroff-mode)
     #+END_SRC

**** PHP

     #+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode "\\.php\\'")
     #+END_SRC

**** Python

***** Anaconda

     #+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :commands (anaconda-mode anaconda-eldoc-mode)
  :init
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
     #+END_SRC

***** python-mode

      #+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
      #+END_SRC

***** elpy

      #+BEGIN_SRC emacs-lisp
(use-package elpy
  :mode ("\\.py\\'" . elpy-mode))
      #+END_SRC

**** Ruby

     #+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :ensure nil
  :mode ("\\.rb\\'" . ruby-mode)
  :interpreter ("ruby" . ruby-mode))
     #+END_SRC

**** Rust

     #+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
     #+END_SRC

**** SASS

     #+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :mode "\\.sass\\'")
     #+END_SRC

**** Scala

     #+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
     #+END_SRC

**** SCSS

     #+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'")
     #+END_SRC

**** Shell

     #+BEGIN_SRC emacs-lisp
(use-package sh-script
  :ensure nil
  :preface
  (defun shell-command-at-point ()
    (interactive)
    (let ((start-point (save-excursion
                         (beginning-of-line)
                         (point))))
      (shell-command (buffer-substring start-point (point)))))
  :mode (("\\.*shellrc$" . sh-mode)
         ("\\.*shell_profile" . sh-mode)
         ("\\.zsh\\'" . sh-mode))
  :bind (:map sh-mode-map
              ("C-x C-e" . shell-command-at-point)))
     #+END_SRC

**** texinfo

     #+BEGIN_SRC emacs-lisp
(use-package texinfo
  :mode ("\\.texi\\'" . texinfo-mode))
     #+END_SRC

**** TypeScript

     #+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'")
     #+END_SRC

***** tide

      #+BEGIN_SRC emacs-lisp
(use-package tide
  :commands (tide-setup tide-hl-identifier-mode)
  :init
  (add-hook 'typescript-mode-hook 'tide-setup)
  (add-hook 'typescript-mode-hook 'tide-hl-identifier-mode))
      #+END_SRC

**** Web

     #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.html?\\'" . web-mode)
         ("\\.php\\'" . web-mode)
         ("\\.jsp\\'" . web-mode)))
     #+END_SRC

**** XML

     #+BEGIN_SRC emacs-lisp
(use-package nxml-mode
  :ensure nil
  :commands nxml-mode
  :init
  (defalias 'xml-mode 'nxml-mode))
     #+END_SRC

**** YAML

     #+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
     #+END_SRC

*** Personal

    These are all available in [[./lisp]]. Eventually they should go into separate
    repositories.

**** dired-column
**** em-dired
**** installer
**** macho-mode
**** nethack

     #+BEGIN_SRC emacs-lisp
(use-package nethack
  :commands nethack
  :ensure nil)
     #+END_SRC

**** nix-fontify
**** set-defaults
**** use-package-list
*** Other

    These should correspond to minor modes or helper functions. Some of them are
    more helpful than others but none are /essential/.

    Most of these are available in MELPA.

**** gnuplot

     #+BEGIN_SRC emacs-lisp
(use-package gnuplot)
     #+END_SRC

**** logview

     #+BEGIN_SRC emacs-lisp
(use-package logview)
     #+END_SRC

**** anything

     #+BEGIN_SRC emacs-lisp
(use-package anything
  :commands anything)
     #+END_SRC

**** apropospriate-theme

     This is the theme I use. This has to be defered for some reason.

     #+BEGIN_SRC emacs-lisp
(use-package apropospriate-theme
  :demand
  :config (load-theme 'apropospriate-dark t))
     #+END_SRC

**** auto-compile                                                  :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     Auto-compile is currrently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :demand
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  (add-hook 'auto-compile-inhibit-compile-hook
            'auto-compile-inhibit-compile-detached-git-head))
     #+END_SRC

**** bm
     #+BEGIN_SRC emacs-lisp
(use-package bm)
     #+END_SRC

**** bool-flip

     #+BEGIN_SRC emacs-lisp
(use-package bool-flip
  :bind ("C-c C-b" . bool-flip-do-flip))
     #+END_SRC

**** browse-at-remote

     #+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :commands browse-at-remote)
     #+END_SRC

**** checkbox                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     Checkbox is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package checkbox
  :bind (("C-c C-t" . checkbox-toggle)))
     #+END_SRC

**** copy-as-format

     #+BEGIN_SRC emacs-lisp
(use-package copy-as-format
  :bind (("C-c w s" . copy-as-format-slack)
         ("C-c w g" . copy-as-format-github)))
     #+END_SRC

**** crux

     #+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-c D" . crux-delete-file-and-buffer)
         ("C-c C-e" . crux-eval-and-replace)
         ([shift return] . crux-smart-open-line)))
     #+END_SRC

**** easy-kill                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp]      . easy-mark)))
     #+END_SRC

**** elfeed

     #+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed)
     #+END_SRC

***** elfeed-org                                                   :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :after elfeed
  :config (elfeed-org))
     #+END_SRC

**** expand-region

     #+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
     #+END_SRC

**** firestarter

     #+BEGIN_SRC emacs-lisp
(use-package firestarter
  :bind ("C-c m s" . firestarter-mode))
     #+END_SRC

**** focus

     #+BEGIN_SRC emacs-lisp
(use-package focus
  :bind ("C-c m f" . focus-mode))
     #+END_SRC

**** gist                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package gist
  :bind ("C-c C-g" . gist-region-or-buffer-private)
  :commands (gist-list gist-region gist-region-private gist-buffer
                       gist-buffer-private gist-region-or-buffer
                       gist-region-or-buffer-private))
     #+END_SRC

**** hl-todo

     #+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :commands hl-todo-mode
  :init (add-hook 'prog-mode-hook 'hl-todo-mode))
     #+END_SRC

**** hookify

     #+BEGIN_SRC emacs-lisp
(use-package hookify
  :commands hookify)
     #+END_SRC

**** htmlize

     #+BEGIN_SRC emacs-lisp
(use-package htmlize)
     #+END_SRC

**** hydra                                                         :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package hydra
  :bind (("C-x t" . hydra-toggle/body)
         ("<f5>" . hydra-zoom/body)
         ("C-M-g" . hydra-error/body)
         ("C-c h c" . hydra-case/body)
         ("C-c h z" . hydra-zoom/body)
         ("C-c h e" . hydra-error/body)
         ("C-c h p" . hydra-projectile/body)
         ("C-c h w" . hydra-window/body))
  :config (hydra-add-font-lock)
  :preface
  (eval-and-compile
    (defhydra hydra-error (:color amaranth)
      "goto-error"
      ("h" flycheck-list-errors "first")
      ("j" flycheck-next-error "next")
      ("k" flycheck-previous-error "prev")
      ("v" recenter-top-bottom "recenter")
      ("q" nil "quit"))

    (defhydra hydra-zoom (:color blue :hint nil)
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

    (defhydra hydra-case ()
      "case"
      ("c" string-inflection-all-cycle nil)
      ("c" string-inflection- nil)
      )

    (defhydra hydra-projectile (:color blue :columns 4)
      "Projectile"
      ("a" counsel-git-grep "ag")
      ("b" projectile-switch-to-buffer "switch to buffer")
      ("c" projectile-compile-project "compile project")
      ("d" projectile-find-dir "dir")
      ("f" projectile-find-file "file")
      ("g" ggtags-update-tags "update gtags")
      ("i" projectile-ibuffer "Ibuffer")
      ("K" projectile-kill-buffers "Kill all buffers")
      ("p" projectile-switch-project "switch")
      ("r" projectile-run-async-shell-command-in-root "run shell command")
      ("x" projectile-remove-known-project "remove known")
      ("X" projectile-cleanup-known-projects "cleanup non-existing")
      ("z" projectile-cache-current-file "cache current")
      ("q" nil "cancel")
      )

    (defhydra hydra-window (:color amaranth)
      "
  Move Point^^^^   Move Splitter   ^Ace^                       ^Split^
  --------------------------------------------------------------------------------
  _w_, _<up>_      Shift + Move    _C-a_: ace-window           _2_: split-window-below
  _a_, _<left>_                    _C-s_: ace-window-swap      _3_: split-window-right
  _s_, _<down>_                    _C-d_: ace-window-delete    ^ ^
  _d_, _<right>_                   ^   ^                       ^ ^
  You can use arrow-keys or WASD.
  "
      ("2" split-window-below nil)
      ("3" split-window-right nil)
      ("a" windmove-left nil)
      ("s" windmove-down nil)
      ("w" windmove-up nil)
      ("d" windmove-right nil)
      ("A" hydra-move-splitter-left nil)
      ("S" hydra-move-splitter-down nil)
      ("W" hydra-move-splitter-up nil)
      ("D" hydra-move-splitter-right nil)
      ("<left>" windmove-left nil)
      ("<down>" windmove-down nil)
      ("<up>" windmove-up nil)
      ("<right>" windmove-right nil)
      ("<S-left>" hydra-move-splitter-left nil)
      ("<S-down>" hydra-move-splitter-down nil)
      ("<S-up>" hydra-move-splitter-up nil)
      ("<S-right>" hydra-move-splitter-right nil)
      ("C-a" ace-window nil)
      ("u" hydra--universal-argument nil)
      ("C-s" (lambda () (interactive) (ace-window 4)) nil)
      ("C-d" (lambda () (interactive) (ace-window 16)) nil)
      ("q" nil "quit"))))
     #+END_SRC

**** idle-highlight-mode                                           :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :commands idle-highlight-mode
  :init (add-hooks '(((java-mode
                       emacs-lisp-mode
                       clojure-lisp-mode) . idle-highlight-mode))))
     #+END_SRC

**** keyfreq                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package keyfreq
  :commands (keyfreq-mode keyfreq-autosave-mode)
  :init
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
     #+END_SRC

**** lsp-mode                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp-mode
  :init (add-hook 'prog-major-mode #'lsp-mode)

  :config

  (use-package lsp-java
    :demand)
  (use-package lsp-haskell
    :demand)
  (use-package lsp-go
    :demand)
  (use-package lsp-python
    :demand)
  (use-package lsp-rust
    :demand))
     #+END_SRC

**** make-it-so                                                    :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package make-it-so
  :commands mis-mode
  :init (add-hook 'dired-mode-hook 'mis-mode)
  :bind (:map dired-mode-map
             :prefix ","
             :prefix-map dired-make-it-so-map
             :prefix-docstring "Make it so map."
             ("," . make-it-so)
             ("f" . mis-finalize)
             ("a" . mis-abort)
             ("r" . mis-replace))
  (use-package make-mode
    :bind (:map makefile-mode-map ("<f5>" . mis-save-and-compile))))
     #+END_SRC

**** mediawiki

     #+BEGIN_SRC emacs-lisp
(use-package mediawiki)
     #+END_SRC

**** minimap

     #+BEGIN_SRC emacs-lisp
(use-package minimap
  :commands minimap-mode)
     #+END_SRC

**** multi-term

     #+BEGIN_SRC emacs-lisp
(use-package multi-term
  :bind (("C-. t" . multi-term-next)
         ("C-. T" . multi-term)))
     #+END_SRC

**** pabbrev                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package pabbrev
  :commands pabbrev-mode
  :init (add-hook 'prog-mode-hook 'pabbrev-mode))
     #+END_SRC

**** page-break-lines

     #+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :commands page-break-lines-mode
  :init (add-hooks '(((doc-mode
                       emacs-lisp-mode) . page-break-lines-mode))))
     #+END_SRC

**** pandoc-mode

     #+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :commands (pandoc-mode pandoc-load-default-settings)
  :init
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))
     #+END_SRC

**** rainbow-delimiters

     #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . rainbow-delimiters-mode))))
     #+END_SRC

**** rainbow-mode

     #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :commands rainbow-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . rainbow-mode))))
     #+END_SRC

**** realgud                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package realgud
  :commands (realgud:jdb))
     #+END_SRC

**** repl-toggle                           ‘                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package repl-toggle
  :config
  (repl-toggle-mode)
  (setq rtog/mode-repl-alist
        '((emacs-lisp-mode . ielm)
          (ruby-mode . inf-ruby)
          (js2-mode . nodejs-repl)
          (rjsx-mode . nodejs-repl))))
     #+END_SRC

**** restclient

     #+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode (("\\.rest\\'" . restclient-mode)
         ("\\.restclient\\'" . restclient-mode)))
     #+END_SRC

**** shrink-whitespace

     #+BEGIN_SRC emacs-lisp
(use-package shrink-whitespace
  :bind ("H-SPC" . shrink-whitespace))
     #+END_SRC

**** smart-shift

     #+BEGIN_SRC emacs-lisp
(use-package smart-shift
  :bind (("C-c <left>" . smart-shift-left)
         ("C-c <right>" . smart-shift-right)
         ("C-c <up>" . smart-shift-up)
         ("C-c <down>" . smart-shift-down)))
     #+END_SRC

**** string-inflection

     #+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :bind (("C-c r r" . string-inflection-all-cycle)
         ("C-c r c" . string-inflection-camelcase)
         ("C-c r l" . string-inflection-lower-camelcase)
         ("C-c r u" . string-inflection-underscore)
         ("C-c r k" . string-inflection-kebab-case)
         ("C-c r J" . string-inflection-java-style-cycle)))
     #+END_SRC

**** undo-tree                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode 1)
  :bind (("C-c u" . undo-tree-visualize)
         ("s-z" . undo-tree-undo)
         ("s-Z" . undo-tree-redo))
  )
     #+END_SRC

**** vkill

     #+BEGIN_SRC emacs-lisp
(use-package vkill
  :bind ("C-x L" . vkill))
     #+END_SRC

**** ws-butler                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :commands (ws-butler-mode)
  :init
  (add-hook 'prog-mode-hook 'ws-butler-mode))
     #+END_SRC

**** xah-math-input

     #+BEGIN_SRC emacs-lisp
(use-package xah-math-input
  :commands xah-math-input-mode)
     #+END_SRC

**** xterm-color

     #+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :commands xterm-color-filter
  :init
  (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions)))
     #+END_SRC

**** yasnippet                                                     :noexport:

     #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands (yas-minor-mode yas-reload-all)
  :init (add-hook 'prog-mode-hook 'yas-minor-mode)
  :config (yas-reload-all))
     #+END_SRC

**** ycmd                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package ycmd
  :commands global-ycmd-mode
  :init
  (add-hook 'after-init-hook #'global-ycmd-mode)
  :config
  (add-hook 'ycmd-file-parse-result-hook 'flycheck-ycmd--cache-parse-results)
  (use-package ycmd-eldoc
    :ensure nil
    :demand
    :config
    (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
  (use-package flycheck-ycmd
    :ensure nil
    :demand
    :config
    (flycheck-ycmd-setup))
  (use-package company-ycmd
    :ensure nil
    :demand
    :config
    (company-ycmd-setup))
  )
     #+END_SRC
** COMMENT Footer

   Provide =default.el= file.

   #+BEGIN_SRC emacs-lisp
(provide 'default)
   #+END_SRC

* Profiles

  All of these files live outside of Emacs but are necessary for a usable
  developer environment. They are basic shell profile and some git configuration
  scripts as well.

** =.profile=
   :PROPERTIES:
   :header-args: :tangle profile.sh
   :END:

   To use this, you must create a short ~/.profile file. Here is an example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/profile
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Here we setup =.profile=. First, setup exports.

   #+BEGIN_SRC sh
export LANG=en_US.UTF-8 \
       LC_ALL=en_US.UTF-8 \
       INFOPATH=$PREFIX/share/info \
       MANPATH=$PREFIX/share/man \
       DICPATH=$PREFIX/share/hunspell \
       CLICOLOR=1 \
       GREP_OPTIONS='--color=auto' \
       GREP_COLOR='3;33' \
       LC_COLLATE=C \
       HISTFILE=$HOME/.history \
       HISTSIZE=16000 \
       HISTFILESIZE=16000 \
       HISTCONTROL=ignoreboth \
       SAVEHIST=15000 \
       SHELL_SESSION_HISTORY=1
   #+END_SRC

   Then setup aliases.

   #+BEGIN_SRC sh
alias ls="TERM=ansi ls --color=always" \
      l="ls -lF" \
      ..="cd .." \
      ...="cd ../.." \
      ....="cd ../../.." \
      .....="cd ../../../.." \
      tree='tree -Csuh' \
      grep="grep --color=auto"
   #+END_SRC

   Configure INSIDE_EMACS.

   #+BEGIN_SRC sh
if [ "$TERM" = dumb ] && ! [ -z "$INSIDE_EMACS" ]; then
    export TERM=dumb-emacs-ansi \
           COLORTERM=1
fi
   #+END_SRC

   Define =update_terminal_cwd= function.

   #+BEGIN_SRC sh
update_terminal_cwd () {
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
}
   #+END_SRC
** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle bashrc.sh
   :END:

   To use this, you must create a short =~/.bash_profile= file. Here is an
   example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/bashrc
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Source profile found above.

   #+BEGIN_SRC sh
source @out@/etc/profile
   #+END_SRC

   When TERM=dumb, just do a simple prompt.

   #+BEGIN_SRC sh
case "$TERM" in
    dumb)
        PS1="\W > "
        return
        ;;
esac
   #+END_SRC

   Setup some bash-specific features.

   #+BEGIN_SRC sh
shopt -s cdspell \
         cdable_vars \
         checkhash \
         checkwinsize \
         cmdhist \
         dotglob \
         extglob \
         histappend \
         histreedit \
         histverify \
         nocaseglob \
         no_empty_cmd_completion \
         sourcepath
   #+END_SRC

   Turn on notify, noclobber, ignoreeof, emacs. These are bash-specific.

   #+BEGIN_SRC sh
set -o notify \
    -o noclobber \
    -o ignoreeof \
    -o emacs
   #+END_SRC

   Setup prompt.

   #+BEGIN_SRC sh
PS1='\e[0;34m\u@\h:\e[0;36m\w \e[0;33m$ \e[0m'
   #+END_SRC

   Bind keys when we’re interactive.

   #+BEGIN_SRC sh
if [[ $- == *i* ]]; then
    bind '"\e/": dabbrev-expand'
    bind '"\ee": edit-and-execute-command'
fi
   #+END_SRC

   Run the =update_terminal_cwd= command when we’re in Apple_Terminal. This will
   give us the working directory in the title window.

   #+BEGIN_SRC sh
if [ "$TERM_PROGRAM" = Apple_Terminal ] && [ -z "$INSIDE_EMACS" ]; then
    PROMPT_COMMAND="update_terminal_cwd;$PROMPT_COMMAND"
    update_terminal_cwd
fi
   #+END_SRC
** =.zshrc=
   :PROPERTIES:
   :header-args: :tangle zshrc.sh
   :END:

   To use this, you must create a short ~/.zshrc file. Here is an example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/zshrc
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Setup ZSH profile. First, we just source the global profile.

   #+BEGIN_SRC sh
source @out@/etc/profile
   #+END_SRC

   Handle dumb options.

   #+BEGIN_SRC sh
case "$TERM" in
    dumb)
        unsetopt zle \
                 prompt_cr \
                 prompt_subst
        if whence -w precmd >/dev/null; then
            unfunction precmd
        fi
        if whence -w preexec >/dev/null; then
            unfunction preexec
        fi
        PS1='$ '
        return
        ;;
esac
   #+END_SRC

   Load up site-functions in ZSH.

   #+BEGIN_SRC sh
fpath+=(@out@/share/zsh/site-functions)
   #+END_SRC

   Setup ZSH auto suggestions.

   #+BEGIN_SRC sh
. @zsh-autosuggestions@/share/zsh-autosuggestions/zsh-autosuggestions.zsh
   #+END_SRC

   Turn on colors.

   #+BEGIN_SRC sh
autoload -U colors && colors
   #+END_SRC

   Turn on ZSH-specific options.

   #+BEGIN_SRC sh
setopt always_to_end \
       append_history \
       auto_cd \
       auto_menu \
       auto_name_dirs \
       auto_pushd \
       cdablevarS \
       complete_in_word \
       correct \
       correctall \
       extended_glob \
       extended_history \
       hist_expire_dups_first \
       hist_find_no_dups \
       hist_ignore_dups \
       hist_ignore_space \
       hist_reduce_blanks \
       hist_verify \
       inc_append_history \
       interactive_comments \
       long_list_jobs \
       multios \
       no_beep \
       prompt_subst \
       pushd_ignore_dups \
       pushdminus \
       share_history \
       transient_rprompt
   #+END_SRC

   Setup completions.

   #+BEGIN_SRC sh
ZSH_COMPDUMP="${HOME}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}"
autoload -U compaudit compinit && compinit -d "${ZSH_COMPDUMP}"
zmodload -i zsh/complist
   #+END_SRC

   Zstyle completions.

   #+BEGIN_SRC sh
zstyle ':vcs_info:*' actionformats \
       '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:*' enable git

zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors \
       '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command \
       "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack \
       path-directories
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST
zstyle ':completion:*' select-prompt \
       '%SScrolling active: current selection at %p%s'
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:scp:*' tag-order files users \
       'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order files all-files users hosts-domain \
       hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order users \
       'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users \
       hosts-ipaddr
zstyle '*' single-ignored show
   #+END_SRC

   Turn on prompt with colors.

   #+BEGIN_SRC sh
PROMPT='%F{blue}%n@%m:%F{cyan}%c%F{yellow} $ %F{reset}'
   #+END_SRC

   ZSH key bindings.

   #+BEGIN_SRC sh
if [ "$TERM" = xterm-256color ]; then
    bindkey "^[[H" beginning-of-line
    bindkey "^[[F" end-of-line
    bindkey "^[[3~" delete-char
fi
   #+END_SRC

   Setup Apple Terminal so that CWD is shown.

   #+BEGIN_SRC sh
if [ "$TERM_PROGRAM" = Apple_Terminal ] && [ -z "$INSIDE_EMACS" ]; then
    autoload add-zsh-hook
    add-zsh-hook chpwd update_terminal_cwd
    update_terminal_cwd
fi
   #+END_SRC
** =etc-profile.sh=
   :PROPERTIES:
   :header-args: :tangle etc-profile.sh
   :END:

   This just sources everything in the =/etc/profile.d= dir. =PREFIX= can be
   used to reference the Nix output dir.

   #+BEGIN_SRC sh
export PREFIX=@out@
   #+END_SRC

   This will source everything in =/etc/profile.d=.

   #+BEGIN_SRC sh
if [ -d @out@/etc/profile.d ]; then
  for i in @out@/etc/profile.d/*.sh; do
    if [ -r $i ]; then
      source $i
    fi
  done
fi
   #+END_SRC
** =.gitignore=
   :PROPERTIES:
   :header-args: :tangle gitignore
   :END:

   Some basic gitignore paths.

   #+BEGIN_SRC gitignore
*~
\#*\#
*.DS_Store
   #+END_SRC
** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle gitconfig
   :END:

   #+BEGIN_SRC gitconfig
[core]
	editor = emacsclient
	excludesfile = @gitignore@

[commit]
	gpgSign = true

[gpg]
	program = "@gnupg@/bin/gpg"

[push]
	default = simple

[pull]
	rebase = true

[alias]
	amend = commit --amend

[help]
	autcorrect = 1

[color]
	ui = true
   #+END_SRC
* Bootstrapping
** =site-paths.el.in=
   :PROPERTIES:
   :header-args: :tangle site-paths.el.in
   :END:

   This file provides site-specific paths. However, it must be substituted in
   Nix before we can actually run it in Emacs. To prevent Emacs from trying to
   run this, I’ve set the syntax to =text=.

   #+BEGIN_SRC emacs-lisp
(require 'set-defaults)
(require 'subr-x)
   #+END_SRC

   =output-directory= points to the nix-profile directory created by Nix.
   Ideally, this could point to a Nix store path, but the order of building
   means that we don’t know this until too late.

   #+BEGIN_SRC emacs-lisp
(defvar output-directory (expand-file-name ".nix-profile" (getenv "HOME")))
   #+END_SRC

   Setup =exec-path=.

   #+BEGIN_SRC emacs-lisp
(setq exec-path (append `(,(expand-file-name "bin" output-directory)
                           "/usr/sbin" "/usr/bin" "/sbin" "/bin")
                        exec-path))
   #+END_SRC

   Setup =man-path=.

   #+BEGIN_SRC emacs-lisp
(defvar man-path `("/usr/share/man"
                   "/usr/local/share/man"
                   ,(expand-file-name "share/man" output-directory)))
   #+END_SRC

   This will setup cacert-file var,

   #+BEGIN_SRC emacs-lisp
(defcustom cacert-file "/etc/ssl/certs/ca-bundle.crt"
  "Path for SSL certificates."
  :group 'environment)
   #+END_SRC

   Set env vars provided by Nix,

   #+BEGIN_SRC emacs-lisp
(set-envs
 ;; `("NIX_SSL_CERT_FILE" ,cacert-file)
 `("NIX_PATH" "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixpkgs")
 `("PATH" ,(string-join exec-path ":"))
 `("MANPATH" ,(string-join man-path ":"))
 )
   #+END_SRC

   Set paths provided by Nix,

   #+BEGIN_SRC emacs-lisp
(set-paths
 '(company-cmake-executable "@cmake@/bin/cmake")
 '(doc-view-dvipdf-program "@ghostscript@/bin/dvipdf")
 '(cacert-file "@cacert@/etc/ssl/certs/ca-bundle.crt")
 '(doc-view-ps2pdf-program "@ghostscript@/bin/ps2pdf")
 '(dired-touch-program "@coreutils@/bin/touch")
 '(dired-chmod-program "@coreutils@/bin/chmod")
 '(dired-chown-program "@coreutils@/bin/chown")
 '(dired-free-space-program "@coreutils@/bin/df")
 '(diff-command "@diffutils@/bin/diff")
 '(find-program "@findutils@/bin/find")
 '(epg-gpg-program "@gpg@/bin/gpg")
 '(epg-gpgconf-program "@gpg@/bin/gpgconf")
 '(epg-gpgsm-program "@gpg@/bin/gpgsm")
 '(explicit-shell-file-name "@bash@/bin/bash")
 '(flycheck-sh-bash-executable "@bash@/bin/bash")
 '(flycheck-sh-zsh-executable "@zsh@/bin/zsh")
 '(flycheck-perl-executable "@perl@/bin/perl")
 '(flycheck-go-golint-executable "@golint@/bin/golint")
 '(flycheck-python-flake8-executable "@flake8@/bin/flake8")
 '(flycheck-asciidoc-executable "@asciidoc@/bin/asciidoc")
 '(flycheck-less-executable "@lessc@/bin/lessc")
 '(flycheck-haskell-stack-ghc-executable "@stack@/bin/stack")
 '(flycheck-c/c++-gcc-executable "@gcc@/bin/gcc")
 '(flycheck-javascript-eslint-executable "@eslint@/bin/eslint")
 '(flycheck-javascript-jshint-executable "@jshint@/bin/jshint")
 '(flycheck-go-build-executable "@go@/bin/go")
 '(flycheck-go-test-executable "@go@/bin/go")
 '(flycheck-lua-executable "@lua@/bin/luac")
 '(flycheck-xml-xmllint-executable "@libxml2@/bin/xmllint")
 '(flycheck-perl-perlcritic-executable "@perlcritic@/bin/perlcritic")
 '(flycheck-html-tidy-executable "@tidy@/bin/tidy")
 '(fortune-dir "@fortune@/share/games/fortunes")
 '(fortune-file "@fortune@/share/games/fortunes/food")
 '(grep-program "@gnugrep@/bin/grep")
 '(ispell-program-name "@aspell@/bin/aspell")
 '(irony-cmake-executable "@cmake@/bin/cmake")
 '(jka-compr-info-compress-program "@ncompress@/bin/compress")
 '(jka-compr-info-uncompress-program "@ncompress@/bin/uncompress")
 '(irony-server-install-prefix "@irony@")
 '(jka-compr-dd-program "@coreutils@/bin/dd")
;; '(jdee-server-dir "@jdeeserver@")
 '(magit-git-executable "@git@/bin/git")
 '(markdown-command "@markdown2@/bin/markdown2")
 '(manual-program "@man@/bin/man")
 '(man-awk-command "@gawk@/bin/awk")
 '(man-sed-command "@gnused@/bin/sed")
 '(man-untabify-command "@coreutils@/bin/pr")
 '(nethack-executable "@nethack@/bin/nethack")
 '(org-pandoc-command "@pandoc@/bin/pandoc")
 '(pandoc-binary "@pandoc@/bin/pandoc")
 '(remote-shell-program "@openssh@/bin/ssh")
 '(ripgrep-executable "@ripgrep@/bin/rg")
 '(rtags-path "@rtags@/bin")
 '(sql-ingres-program "@parallel@/bin/sql")
 '(sql-interbase-program "@unixODBC@/bin/isql")
 '(sql-mysql-program "@mariadb@/bin/mysql")
 '(sql-ms-program "@freetds@/bin/osql")
 '(sql-postgres-program "@freetds@/bin/osql")
 '(sql-sqlite-program "@sqliteInteractive@/bin/sqlite3")
 '(tramp-encoding-shell "@bash@/bin/sh")
 '(tex-shell "@bash@/bin/sh")
 '(xargs-program "@findutils@/bin/xargs")
 '(vc-git-program "@git@/bin/git")
 '(gnutls "@gnutls@/bin/gnutls-cli")
 '(pdf2dsc-command "@ghostscript@/bin/pdf2dsc")
 '(preview-gs-command "@texlive@/bin/rungs")
 '(TeX-command "@texlive@/bin/tex")
 '(LaTeX-command "@texlive@/bin/latex")
 '(luatex-command "@texlive@/bin/luatex")
 '(xetex-command "@texlive@/bin/xetex")
 '(xelatex-command "@texlive@/bin/xelatex")
 '(makeinfo-command "@texinfoInteractive@/bin/makeinfo")
 '(pdftex-command "@texlive@/bin/pdftex")
 '(context-command "@texlive@/bin/context")
 '(bibtex-command "@texlive@/bin/bibtex")
 '(dvipdfmx-command "@texlive@/bin/dvipdfmx")
 '(makeindex-command "@texlive@/bin/makeindex")
 '(chktex-command "@texlive@/bin/chktex")
 '(lacheck-command "@texlive@/bin/lacheck")
 '(dvipdfmx-command "@texlive@/bin/dvipdfmx")
 '(dvips-command "@texlive@/bin/dvips")
 '(dvipng-command "@texlive@/bin/dvipng")
 '(ps2pdf-command "@ghostscript@/bin/ps2pdf")
 '(locate-executable "@findutils@/bin/locate")
 '(ag-executable "@ag@/bin/ag")
 '(intero-stack-executable "@intero@/bin/intero-nix-shim")
 '(notmuch-command "@notmuch@/bin/notmuch")
 '(org-export-async-init-file "@orginit@")
 )
   #+END_SRC

   Set some defaults that depend on the path variables below,

   #+BEGIN_SRC emacs-lisp
(set-defaults
 '(imap-ssl-program `(,(concat gnutls " --tofu -p %p %s")))
 '(tls-program (concat gnutls " --tofu -p %p %h"))
 '(preview-pdf2dsc-command
   (concat pdf2dsc-command " %s.pdf %m/preview.dsc"))
 '(preview-dvips-command
   (concat dvips-command " -Pwww %d -o %m/preview.ps"))
 '(preview-fast-dvips-command
   (concat dvips-command " -Pwww %d -o %m/preview.ps"))
 '(preview-dvipng-command
   (concat dvipng-command
           " -picky -noghostscript %d -o \"%m/prev%%03d.png\""))
 '(TeX-engine-alist `((xetex "XeTeX" xetex-command xelatex-command
                             xetex-command)
                      (luatex "LuaTeX" luatex-command
                              ,(concat luatex-command " --jobname=%s")
                              luatex-command)))
 '(TeX-command-list
   `(("TeX"
      "%(PDF)%(tex) %(file-line-error) %(extraopts) %`%S%(PDFout)%(mode)%' %t"
      TeX-run-TeX nil
      (plain-tex-mode ams-tex-mode texinfo-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" ,(concat makeinfo-command " %(extraopts) %t")
      TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" ,(concat makeinfo-command " %(extraopts) --html %t")
      TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX"
      ,(concat pdftex-command " %(PDFout) %(extraopts) %`%S%(mode)%' %t")
      TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt"
      ,(concat context-command " --once --texutil %(extraopts) %(execopts)%t")
      TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" ,(concat context-command " %(extraopts) %(execopts)%t")
      TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" ,(concat bibtex-command " %s")
      TeX-run-BibTeX nil t :help "Run BibTeX")
     ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
     ("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t
      :help "View the printer queue" :visible TeX-queue-command)
     ("File" ,(concat dvips-command " %d -o %f ")
      TeX-run-dvips t t :help "Generate PostScript file")
     ("Dvips" ,(concat dvips-command " %d -o %f ")
      TeX-run-dvips nil t :help "Convert DVI file to PostScript")
     ("Dvipdfmx" ,(concat dvipdfmx-command " %d")
      TeX-run-dvipdfmx nil t :help "Convert DVI file to PDF with dvipdfmx")
     ("Ps2pdf" ,(concat ps2pdf-command " %f")
      TeX-run-ps2pdf nil t :help "Convert PostScript file to PDF")
     ("Index" ,(concat makeindex-command " %s")
      TeX-run-index nil t :help "Run makeindex to create index file")
     ("upMendex" "upmendex %s"
      TeX-run-index t t :help "Run mendex to create index file")
     ("Xindy" "xindy %s"
      TeX-run-command nil t :help "Run xindy to create index file")
     ("Check" ,(concat lacheck-command " %s") TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("ChkTeX" ,(concat chktex-command " -v6 %s") TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for common mistakes")
     ("Spell" "(TeX-ispell-document \"\")"
      TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean"
      TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t
      :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command")))
 '(counsel-grep-base-command
   (concat ripgrep-executable
           " -i -M 120 --no-heading --line-number --color never '%s' %s"))
 '(counsel-rg-base-command
   (concat ripgrep-executable " -i --no-heading --line-number %s ."))
 '(counsel-ag-base-command (concat ag-executable " --nocolor --nogroup %s"))
 '(org-preview-latex-process-alist
   `((dvipng :programs ("latex" "dvipng")
             :description "dvi > png"
             :message ""
             :image-input-type "dvi"
             :image-output-type "png"
             :image-size-adjust (1.0 . 1.0)
             :latex-compiler
             (,(concat LaTeX-command
                       " -interaction nonstopmode -output-directory %o %f"))
             :image-converter
             (,(concat dvipng-command
                       " -fg %F -bg %B -D %D -T tight -o %O %f")))))
 '(Info-directory-list `(,(expand-file-name "share/info" output-directory)))
 '(tramp-remote-path `(tramp-own-remote-path
                       "/run/current-system/sw/bin"
                       tramp-default-remote-path
                       "/bin"
                       "/usr/bin"
                       "/sbin"
                       "/usr/sbin"
                       "/usr/local/bin"
                       "/usr/local/sbin"
                       "/opt/bin"
                       "/opt/sbin"
                       ,(expand-file-name "bin" output-directory)
                       ))
 '(woman-manpath man-path)
 )
   #+END_SRC

   Provide site-paths,

   #+BEGIN_SRC emacs-lisp
(provide 'site-paths)
   #+END_SRC

** =bootstrap.sh=
   :PROPERTIES:
   :header-args: :tangle bootstrap.sh
   :END:

   #+BEGIN_SRC sh
#!/bin/sh
   #+END_SRC

   Install Nix.

   #+BEGIN_SRC sh
if ! command -v nix-env >/dev/null 2>&1; then
    nix_installer=$(mktemp)
    curl -s https://nixos.org/nix/install > $nix_installer
    sh $nix_installer
fi
   #+END_SRC

   Pull into Git repo.

   #+BEGIN_SRC sh
if [ -d .git ] && command -v git >/dev/null 2>&1
then
    git pull origin master || true
fi
   #+END_SRC

   Clone if default.nix doesn’t exist.

   #+BEGIN_SRC sh
if ! [ -f default.nix ] &&  && command -v git >/dev/null 2>&1; then
    repo_dir=$(mktemp -d)
    git clone https://github.com/matthewbauer/bauer $repo_dir
    cd $repo_dir
fi
   #+END_SRC

   Install current directory

   #+BEGIN_SRC sh
nix-env -if .
   #+END_SRC

** =runemacs.sh=
   :PROPERTIES:
   :header-args: :tangle runemacs.sh
   :END:

   Cross-platform script to execute app.

   #+BEGIN_SRC sh
#!/usr/bin/env sh

case $(uname) in
    Darwin)
        open @out@/Applications/Emacs.app
    ;;
    *)
        @out@/bin/emacs
    ;;
esac
   #+END_SRC
* Building
** =default.nix=: the tangler
   :PROPERTIES:
   :header-args: :tangle default.nix
   :END:

   #+BEGIN_SRC nix
{ nixpkgs-url ? "nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz"
, nixpkgs ? builtins.fetchTarball nixpkgs-url
, nixpkgs' ? import nixpkgs {}
}: with nixpkgs';
   #+END_SRC

   Now let's tangle README.org...

   #+BEGIN_SRC nix
import (runCommand "README" { buildInputs = [ emacs ]; } ''
mkdir -p $out
cd $out
cp -r ${./lisp} $out/lisp
cp ${./README.org} README.org
emacs --batch --quick \
      -l ob-tangle \
      --eval "(org-babel-tangle-file \"README.org\")"
cp bauer.nix default.nix
'') {inherit nixpkgs';}
   #+END_SRC
** =bauer.nix=: the build script
   :PROPERTIES:
   :header-args: :tangle bauer.nix
   :END:

   =nixpkgs= should just be a Nix path to the Nixpkgs package set. =nixpkgs'=
   will be =nixpkgs= instantiated.

   #+BEGIN_SRC nix
{ nixpkgs-url ? "nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz"
, nixpkgs ? builtins.fetchTarball nixpkgs-url
, nixpkgs' ? import nixpkgs {}
}: with nixpkgs'; let
   #+END_SRC

   We start out by defining the Nix version to use. nixStable corresponds to the
   last released version, 1.11.

   #+BEGIN_SRC nix
nix = nixStable;
   #+END_SRC

  Next we start defining some packages. R is one of the simpler ones right now,
  so let's start with that.

  #+BEGIN_SRC nix
  rEnv = pkgs.rWrapper.override {
    packages = with pkgs.rPackages; [
      RCurl
    ];
  };
  #+END_SRC

  Here we define our package set. This will just give us access to all of the
  Emacs packages defined in Nixpkgs.

  #+BEGIN_SRC nix
  customEmacsPackages = emacsPackagesNg.overrideScope (super: self: {
    inherit emacs;
  });
  #+END_SRC

  Next, we define aspell with the English language. This is used by Emacs
  ispell.

  #+BEGIN_SRC nix
  myAspell = aspellWithDicts (ps : with ps; [ en ]);
  #+END_SRC

  Tex live provides some LaTeX commads for us.

  #+BEGIN_SRC nix
  myTex = texlive.combine {
    inherit (texlive) xetex setspace
      fontspec chktex enumitem xifthen
      ifmtarg filehook wrapfig inconsolata
      upquote minted lastpage collection-basic
      collection-binextra collection-context
      collection-fontsrecommended collection-fontutils
      collection-genericrecommended collection-langenglish
      collection-latex collection-latexrecommended collection-luatex
      collection-mathextra collection-metapost collection-plainextra
      collection-texworks collection-xetex capt-of;
  };
  #+END_SRC

*** Emacs configuration

   Here, we start building up the site-paths.el file. This does a simple
   substitution of all the attributes set.

   #+BEGIN_SRC nix
  site-paths = runCommand "site-paths.el" {
    inherit rtags ripgrep ag emacs ant nethack fortune gnutls
      coreutils findutils openssh git bash
      zsh perl golint perlcritic
      go asciidoc lessc stack
      lua gcc bashInteractive diffutils
      pandoc clang cmake ghostscript
      gnugrep man gawk gnused
      sqliteInteractive freetds mariadb
      parallel unixODBC ncompress
      texinfoInteractive cacert notmuch;
    inherit (pythonPackages) flake8;
    inherit (nodePackages) jshint eslint;
    intero = haskellPackages.intero-nix-shim;
    texlive = myTex;
    markdown2 = pythonPackages.markdown2;
    tidy = html-tidy;
    irony = irony-server;
    libxml2 = libxml2.bin;
    gpg = gnupg1compat;
    # jdeeserver = jdee-server;
    aspell = myAspell;
    orginit = ./org-init.el;
  } ''
cp ${./site-paths.el.in} $out
substituteAllInPlace $out
  '';
   #+END_SRC

   Emacs building can be divided into phases. Each phase will run through the
   Elisp once.

**** Phase 1: picking up dependencies

   myPackages gets a listing of all of the packages that are needed by the Emacs
   configuration. use-package-list generates this list automatically.

   #+BEGIN_SRC nix
  package-list = with customEmacsPackages.melpaPackages;
    runCommand "package-list" { buildInputs = [ emacs ]; } ''
emacs --batch --quick \
                -L ${bind-key}/share/emacs/site-lisp/elpa/bind-key-* \
                -L ${use-package}/share/emacs/site-lisp/elpa/use-package-* \
                -L ${./lisp} -l use-package-list \
                --eval "(use-package-list \"${./README.el}\")" > $out
  '';
  myPackages = builtins.fromJSON (builtins.readFile package-list);
   #+END_SRC

**** Phase 2: byte compiling

   #+BEGIN_SRC nix
  default = runCommand "default.el" { buildInputs = [emacs]; } ''
mkdir -p $out/share/emacs/site-lisp

cp ${./README.el} $out/share/emacs/site-lisp/default.el
cp ${site-paths} $out/share/emacs/site-lisp/site-paths.el

cp ${./lisp/em-dired.el} $out/share/emacs/site-lisp/em-dired.el
cp ${./lisp/dired-column.el} \
  $out/share/emacs/site-lisp/dired-column.el
cp ${./lisp/macho-mode.el} $out/share/emacs/site-lisp/macho-mode.el
cp ${./lisp/nethack.el} $out/share/emacs/site-lisp/nethack.el
cp ${./lisp/set-defaults.el} \
  $out/share/emacs/site-lisp/set-defaults.el
cp ${./lisp/installer.el} $out/share/emacs/site-lisp/installer.el
cp ${./lisp/restart-emacs.el} \
  $out/share/emacs/site-lisp/restart-emacs.el
cp ${./lisp/company-eshell-history.el} \
  $out/share/emacs/site-lisp/company-eshell-history.el
cp ${./lisp/use-package-list.el} \
  $out/share/emacs/site-lisp/use-package-list.el
   #+END_SRC

   Ideally, we could compile the .el file into a .elc, but it doesn’t work so
   well. The below block should do it, but it gives lots of errors.

   #+BEGIN_SRC nix
cd $out/share/emacs/site-lisp
export HOME=$PWD
emacs --batch --quick \
      --eval "(let ((default-directory \"${emacsWrapper
                ((requiredPackages customEmacsPackages myPackages) ++
                  [customEmacsPackages.melpaPackages.use-package])
}/share/emacs/site-lisp\")) (normal-top-level-add-subdirs-to-load-path))" \
      -L . -f batch-byte-compile *.el
   #+END_SRC

   #+BEGIN_SRC nix
  '';
   #+END_SRC

**** Phase 3: wrapping into Emacs

   #+BEGIN_SRC nix
  emacsWrapper = explicitRequires: runCommand "emacs-packages-deps"
   { inherit emacs explicitRequires; inherit (xorg) lndir; }
   ''
     mkdir -p $out/bin
     mkdir -p $out/share/emacs/site-lisp
     local requires
     for pkg in $explicitRequires; do
       findInputs $pkg requires propagated-user-env-packages
     done
     linkPath() {
       local pkg=$1
       local origin_path=$2
       local dest_path=$3
       # Add the path to the search path list, but only if it exists
       if [[ -d "$pkg/$origin_path" ]]; then
         $lndir/bin/lndir -silent "$pkg/$origin_path" "$out/$dest_path"
       fi
     }
     linkEmacsPackage() {
       linkPath "$1" "bin" "bin"
       linkPath "$1" "share/emacs/site-lisp" "share/emacs/site-lisp"
     }
     # Iterate over the array of inputs (avoiding nix's own interpolation)
     for pkg in "''${requires[@]}"; do
       linkEmacsPackage $pkg
     done
     # Byte-compiling improves start-up time only slightly, but costs nothing.
     $emacs/bin/emacs --batch -f batch-byte-compile "$siteStart"
  '';
   #+END_SRC

   requiredPackages is a function that takes two arguments. 

   #+BEGIN_SRC nix
requiredPackages = epkgs: map (x:
  if builtins.hasAttr x epkgs.melpaPackages
    then builtins.getAttr x epkgs.melpaPackages
    else if builtins.hasAttr x epkgs then builtins.getAttr x epkgs
    else if builtins.hasAttr x emacsPackages
    then builtins.getAttr x emacsPackages
    else if builtins.hasAttr x epkgs.elpaPackages
    then builtins.getAttr x epkgs.elpaPackages
    else builtins.getAttr x pkgs);
   #+END_SRC

   Now we build our Emacs distribution.

   #+BEGIN_SRC nix
  myEmacs = customEmacsPackages.emacsWithPackages (epkgs:
    (requiredPackages epkgs myPackages)
    ++ [default epkgs.melpaPackages.use-package]
  );
   #+END_SRC

*** The environment

  Finally, we can actually build the environment.

  #+BEGIN_SRC nix
myEnv = buildEnv {
  buildInputs = [ makeWrapper ];
  postBuild = ''
if [ -w $out/share/info ]; then
  shopt -s nullglob
  for i in $out/share/info/*.info $out/share/info/*.info.gz; do # */
    ${texinfoInteractive}/bin/install-info $i $out/share/info/dir
  done
fi

mkdir -p $out/etc

cp ${./gitconfig} $out/etc/gitconfig
substituteInPlace $out/etc/gitconfig \
  --replace @gitignore@ ${./gitignore} \
  --replace @gnupg@ ${gnupg1compat}/bin/gpg \
  --replace @out@ $out

cp ${./bashrc.sh} $out/etc/bashrc
substituteInPlace $out/etc/bashrc \
  --replace @fortune@ ${fortune} \
  --replace @out@ $out

cp ${./zshrc.sh} $out/etc/.zshrc
substituteInPlace $out/etc/.zshrc \
  --replace @zsh-autosuggestions@ ${zsh-autosuggestions} \
  --replace @fortune@ ${fortune} \
  --replace @out@ $out
cp $out/etc/.zshrc $out/etc/zshrc

cp ${./etc-profile.sh} $out/etc/profile
substituteInPlace $out/etc/profile \
  --replace @out@ $out

wrapProgram $out/bin/bash \
  --add-flags "--rcfile $out/etc/bashrc"

wrapProgram $out/bin/zsh \
  --set ZDOTDIR $out/etc

cp ${./runemacs.sh} $out/bin/run
substituteInPlace $out/bin/run \
  --replace @out@ $out
chmod +x $out/bin/run
  '';
  meta = {
    priority = -10;
  };
  pathsToLink = [
    "/bin"
    "/etc/profile.d"
    "/etc/bash_completion.d"
    "/etc/ssl"
    "/Applications"
    "/share/doc"
    "/share/man"
    "/share/info"
    "/share/zsh"
    "/share/bash-completion"
    "/share/mime"
  ];

  extraOutputsToInstall = [ "man" "info" "doc" "devdoc" "devman" ];
  name = "bauer";

  paths = [
    myEmacs
    myTex
    rEnv
    (runCommand "my-profile" { buildInputs = [makeWrapper]; } ''
mkdir -p $out/etc/profile.d
cp ${./profile.sh} $out/etc/profile.d/my-profile.sh
substituteInPlace $out/etc/profile.d/my-profile.sh \
  --replace @emacs@ ${myEmacs} \
  --replace @fortune@ ${fortune} \
  --replace @cacert@ ${cacert}
    '')
  ] ++ [bashInteractive zsh coreutils git
        gawk gnused gzip gnutar gnupg1compat xz cacert
  ] ++ [nox nix nix-index nix-repl]
    ++ [nodePackages.tern isync notmuch graphviz]
    ++ [stack ghc];
};
   #+END_SRC

  #+BEGIN_SRC nix
in myEnv
  #+END_SRC
  
** Invoking it
   We can build it with =nix-build=.

   #+BEGIN_SRC sh :results none
nix-build
./result/bin/run
   #+END_SRC

* Continuous integration
  :PROPERTIES: 
  :header-args: :tangle .travis.yml
  :END:

  #+BEGIN_HTML
<a href=https://travis-ci.org/matthewbauer/bauer">
  <img src="https://travis-ci.org/matthewbauer/bauer.svg?branch=master"></img>
</a>
  #+END_HTML

  We'll set up Travis support here. We start by configuring =.travis.yml=.

** =.travis.yml=

  #+BEGIN_SRC yaml
language: nix
  #+END_SRC

  Next we'll set up nix-build and pass the URL of Nixpkgs with the =NIXPKGS=.

  #+BEGIN_SRC yaml
script:
  - nix-build -Q --argstr nixpkgs-url $NIXPKGS
  - sh info.sh result
  #+END_SRC

  Setup the OSs. Sadly no Windows support yet.

  #+BEGIN_SRC yaml
git:
  depth: 1
sudo: false
os:
  - linux
  - osx
  #+END_SRC

  Setup some values for =NIXPKGS= variables.

  #+BEGIN_SRC yaml
env:
  - NIXPKGS=nixos.org/channels/nixos-17.09/nixexprs.tar.xz
  - NIXPKGS=nixos.org/channels/nixpkgs-17.09-darwin/nixexprs.tar.xz
  - NIXPKGS=nixos.org/channels/nixos-unstable/nixexprs.tar.xz
  - NIXPKGS=nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz
  #+END_SRC

  Configure the matrix...

  #+BEGIN_SRC yaml
matrix:
  exclude:
    - os: linux
      env: NIXPKGS=nixos.org/channels/nixpkgs-17.09-darwin/nixexprs.tar.xz
    - os: osx
      env: NIXPKGS=nixos.org/channels/nixos-17.09/nixexprs.tar.xz
    - os: osx
      env: NIXPKGS=nixos.org/channels/nixos-unstable/nixexprs.tar.xz
  allow_failures:
    - env: NIXPKGS=nixos.org/channels/nixos-unstable/nixexprs.tar.xz
    - env: NIXPKGS=nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz
  #+END_SRC

  Setup the cache.

  #+BEGIN_SRC yaml
cache:
  directories:
    - /nix/store
  #+END_SRC

  Turn off those annoying Travis notifications.

  #+BEGIN_SRC yaml
notifications:
  email: false
  #+END_SRC

* Extra
** =update.sh=
   :PROPERTIES:
   :header-args: :tangle update.sh
   :END:      

   This is a simple script that I use to make sure I've updated the generated
   files.

   #+BEGIN_SRC sh
#!/bin/sh
emacs --batch \
      -l ob-tangle --eval "(org-babel-tangle-file \"README.org\")"
   #+END_SRC
** =info.sh=
   :PROPERTIES:
   :header-args: :tangle info.sh
   :END:

   This file gives us some info on the built derivation. Only arg is optional
   and should be a path to a Nix store derivation.

   #+BEGIN_SRC sh
#!/bin/sh
out=$1

if [ -z "$out" ]; then
  out=$(nix-build)
fi

if [ -L "$out" ]; then
  out=$(readlink -f $out)
fi

if [ -e $out ]; then
  echo Dependencies:
  du -scl $(nix-store -qR $out) | sort -n
fi
   #+END_SRC
** =.gitignore=
   :PROPERTIES:
   :header-args: :tangle .gitignore
   :END:

   These set up some paths for =.gitignore= that we don’t want getting put in
   the repo. Start with Emacs/org-mode/LaTeX stuff.

   #+BEGIN_SRC gitignore
flycheck_*.el
*.elc
*.pdf
*.html
*.tex
*.log
*.aux
*.out
*.toc
   #+END_SRC

   Nix-related stuff.

   #+BEGIN_SRC gitignore
# nix stuff
result
result-*
   #+END_SRC

   These are all tangled by [[./README.org][README.org]].

   #+BEGIN_SRC gitignore
README.el
bashrc.sh
bauer.nix
zshrc.sh
etc-profile.sh
runemacs.sh
gitconfig
gitignore
default.el
profile.sh
site-paths.el.in
init.el
org-init.el
   #+END_SRC
** =config.nix=
   :PROPERTIES:
   :header-args: :tangle config.nix
   :END:

   This file is just for convenience if you wanted to build with the Nixpkgs in
   your channel. Having this file available means you can place this repo in
   \tilde/.nixpkgs and Nixpkgs will have the package ~userPackages~ available.

   #+BEGIN_SRC nix
{
  packageOverrides = pkgs: with pkgs; rec {
    bauer = import ./default.nix { nixpkgs' = pkgs; };
    userPackages = bauer;
  };
}
   #+END_SRC
** =org-init.el=
   :PROPERTIES:
   :header-args: :tangle org-init.el
   :END:

   #+BEGIN_SRC emacs-lisp
(require 'site-paths nil t)
(require 'use-package)
(setq use-package-always-demand t
      use-package-always-ensure nil)
(use-package tex-site)
(use-package emacs-lisp)
(use-package sh-script)
(use-package org
  :config
  (setq org-export-in-background t
        org-src-fontify-natively t
        org-src-preserve-indentation t
        ;; org-html-htmlize-output-type (quote css)
        org-latex-listings (quote minted))
  (use-package ox-latex)
  (use-package ox-beamer)
  (use-package ox-md)
  (use-package ox-rss))
   #+END_SRC
* COMMENT Footer
# Local Variables:
# mode: org
# fill-column: 80
# End:
