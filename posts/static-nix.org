#+TITLE: Static Nix: a command-line swiss army knife
#+AUTHOR: Matthew Bauer <mjbauer95@gmail.com>
#+DATE: <2019-02-24 Sun>

Nix is an extremely useful package manager. But, not all systems have
it installed. Without root priveleges, you cannot create the
=/nix= directory required for it to work.

With static linking, and some new features added in Nix 2.0, you can
fairly easily use the Nix package manager in these unpriveleged
context[fn:1]. To make this even easier, I am publishing prebuilt a
=x86_64= binary on my personal website. It will reside permanently at
https://matthewbauer.us/nix.

* Trying it out

You can use it like this,

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable hello -c hello
Hello World!
#+END_SRC

You can use any package provided by [[https://nixos.org/nixos/packages.html][Nixpkgs]] (using the attribute
name). This gives you a swiss army knife of command line tools. I have
compiled some cool commands to try out. There examples of various
tools, games and demos that you can use through Nix, without
installing anything! Everything is put into temporary
directories[fn:2].

** Dev tools

#+BEGIN_SRC sh
$ nix=$(mktemp); \
  curl https://matthewbauer.us/nix > $nix && \
  chmod +x $nix && \
  $nix run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  bashInteractive curl git htop imagemagick file findutils jq nix openssh pandoc
#+END_SRC

** Emacs

#+BEGIN_SRC sh
$ nix=$(mktemp); \
  curl https://matthewbauer.us/nix > $nix && \
  chmod +x $nix && \
  $nix run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  emacs -c emacs
#+END_SRC

** File manager

#+BEGIN_SRC sh
$ nix=$(mktemp); \
  curl https://matthewbauer.us/nix > $nix && \
  chmod +x $nix && \
  $nix run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  ranger -c ranger
#+END_SRC

** Fire

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | \
  sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  aalib -c aafire
#+END_SRC

** Fortune

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | \
  sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  bash cowsay fortune -c sh -c 'cowsay $(fortune)'
#+END_SRC

** Nethack

#+BEGIN_SRC sh
$ nix=$(mktemp); \
  curl https://matthewbauer.us/nix > $nix && \
  chmod +x $nix && \
  $nix run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  nethack -c nethack
#+END_SRC

** Weather

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | \
  sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  bash curl cowsay -c sh -c 'cowsay $(curl wttr.in/?format=3)'
#+END_SRC

** World map

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | \
  sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  bash coreutils curl libcaca ncurses -c bash -c \
  'img=$(mktemp ${TMPDIR:-/tmp}/XXX.jpg); \
  curl -k https://www.cia.gov/library/publications/the-world-factbook/attachments/images/large/world-physical.jpg > $img \
  && img2txt -W $(tput cols) -f utf8 $img'
#+END_SRC

** Youtube

#+BEGIN_SRC sh
$ curl https://matthewbauer.us/nix | \
  sh -s run --store $HOME/.cache/nix/store -f channel:nixpkgs-unstable \
  bash youtube-dl mplayer -c sh -c \
  'mplayer -vo caca $(youtube-dl --no-check-certificate -g https://www.youtube.com/watch?v=dQw4w9WgXcQ)'
#+END_SRC

** And more...

Lots more cool things are possible. Look through [[https://nixos.org/nixos/packages.html#][the packages provided
by Nixpkgs]] if you need inspiration.

* Build it yourself

This is certainly a security vulnerability so you may want to build
static Nix for youself from [[https://github.com/NixOS/nixpkgs/pull/56281][my pull request]]. Of course you canâ€™t build
static Nix without without Nix, so this would need to be done from a
system that has Nix installed. You can build it yourself, provided you
have git and nix installed, like this,

#+BEGIN_SRC sh
$ git clone https://github.com/matthewbauer/nixpkgs.git
$ cd nixpkgs
$ git checkout static-nix
$ nix-build -A pkgsStatic.nix
#+END_SRC

Then, copy it to your machine without Nix installed (provided you have
ssh installed), like this,

#+BEGIN_SRC sh
$ scp ./result/bin/nix your-machine:
$ ssh your-machine
$ ./nix ...
#+END_SRC

* Footnotes

[fn:1] Note that you will need to be able to set up a private
namespace. This is enabled by default on Linux, but some distros have
specifically disabled it. See [[https://github.com/NixOS/nix/issues/2404][this issue]] for more discussion.

[fn:2] While ideally we would not need temporary directories at all,
some of these commands require it. This is because they check whether
they are in a pipe and refuse to run if so. Your temporary directory
should be cleaned each time your reboot anyway. The Nix packages will
be installed in =$HOME/.cache/nix/store= but they can be removed at
any time.
